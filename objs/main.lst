C166 COMPILER V7.57.0, MAIN                                                                12/26/2020 15:24:03 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\objs\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\main.c MODV2 LARGE BROWSE INCDIR(.\src\hardware;.\src;.\EOL_Diag;.
                    -\DTC_Diag;.\Hw_Driver;.\CalTool;.\DTC_Diag\mcu2_prot;./CAN_Driver;.\xcp;.\src\include;.\EBS_Ctrl_Logic) MODV2 DEBUG CODE
                    - PRINT(.\objs\main.lst) TABS(2) OBJECT(.\objs\main.obj) 

 stmt lvl     source

    1         ////////////////////////////////////////////////////////////////////////////////
    2         /*******************************************************************************
    3         * 
    4         *
    5         *  
    6         *      
    7         *******************************************************************************/
    8         ////////////////////////////////////////////////////////////////////////////////
    9         
   10         #include "std_defs.h" 
   11         #include "board.h"
   12         #include "main_task.h"
   13         #include "diag_hw.h"
   14         #include "hican.h"
   15         
   16         #include "resolver_ad2s.h"
   17         #include "pwm.h"
   18         
   19         #include "ctrl.h"
   20         #include "ctrl_if.h"
   21         
   22         #ifdef WIN32
              #include "pc_hw.h"
              #endif
   25         
   26         ////////////////////////////////////////////////////////////////////////////////
   27         // Global functions
   28         void app_init(void);
   29         void app_10ms_task(void);
   30         void app_5ms_task(void);
   31         void app_mainloop_task(void);
   32         
   33         u16 TryValue1=0,TryValue2=0,TryValue3=0,TryValue4=0,TryValue5=0,TryValue6=0,TryValue7=0,TryValue9=0,TryVal
             -ue10=0,TryValue11=0,TryValue12=0;
   34         s16 TryValue8=0;
   35         s32 TryValue13;
   36         extern u16 g_ctrl_test_timer_uw;
   37         extern u16 test_dir;
   38         extern u16 motor_offset;
   39         extern u16 TryVqs;
   40         extern u16 g_disp_value_sent; //Relative Displacement - RT (Origional:CC2_CC22(PWM_EX3)) Relstive Displace
             -ment define in ccu2_ccu6.c
   41         U16 DEBUG_VAL=0;
   42         ////////////////////////////////////////////////////////////////////////////////
   43         // Main entry
   44         ////////////////////////////////////////////////////////////////////////////////
   45         void main(void)
   46         {
   47  1        app_init();
   48  1      
   49  1          while (1)
   50  1        {   
   51  2          //////////////////////////////////////////////////////
C166 COMPILER V7.57.0, MAIN                                                                12/26/2020 15:24:03 PAGE 2   

   52  2          // 5ms task
   53  2          if (g_overflow_5ms_ub == 1)
   54  2          {
   55  3            g_overflow_5ms_ub=0;
   56  3            app_5ms_task();
   57  3            
   58  3            TryValue1=get_disp_sensor0();  //PWM_EX0
   59  3            TryValue2=get_mc_pressure();  //PWM_EX1
   60  3            TryValue3=get_brk_pedal_state();//PWM_EX2
   61  3            TryValue4=g_disp_value_sent;  //PWM_EX3
   62  3            //TryValue3=get_brk_pedal_volt();
   63  3            //TryValue4=get_bat_volt();
   64  3            //TryValue5=get_ign_volt();
   65  3            TryValue6=get_motor_angle_m();
   66  3            //TryValue7=get_motor_angle_e();
   67  3            //TryValue8=get_motor_speed();
   68  3            //TryValue9=get_temp_sensor_pcb();
   69  3            //TryValue10=get_temp_sensor_mosfet();
   70  3            //TryValue9=g_ctrl_test_timer_uw;
   71  3            //TryValue10=test_dir;
   72  3            //TryValue11=motor_offset;
   73  3            //TryValue12=TryVqs;
   74  3            TryValue13 = get_motor_total_angle();
   75  3            
   76  3          }
   77  2      
   78  2          //////////////////////////////////////////////////////
   79  2          // 10ms task
   80  2          if (g_overflow_10ms_ub == 1)
   81  2              {  
   82  3            g_overflow_10ms_ub = 0;
   83  3            app_10ms_task();
   84  3              }
   85  2      
   86  2          //////////////////////////////////////////////////////
   87  2          // Mainloop task
   88  2          app_mainloop_task();
   89  2          
   90  2          //////////////////////////////////////////////////////
   91  2          } // while(1)...
   92  1      }
   93         
   94         ////////////////////////////////////////////////////////////////////////////////
   95         //
   96         ////////////////////////////////////////////////////////////////////////////////
   97         void app_init(void)
   98         {
   99  1      #ifdef WIN32
                pc_hw_init();
              #else 
  102  1        hw_init();
  103  1      #endif
  104  1        
  105  1        diag_hw_init();
  106  1      
  107  1        //////////////////////////////////////////////////////
  108  1        // Special instruction for XC2000 MCU
  109  1          _einit_(); 
  110  1        
  111  1        //////////////////////////////////////////////////////
  112  1        // FIXED: yly
  113  1        keep_alive(1); //Power Hold.
C166 COMPILER V7.57.0, MAIN                                                                12/26/2020 15:24:03 PAGE 3   

  114  1        
  115  1        //////////////////////////////////////////////////////
  116  1        // Wait the power stable
  117  1        SET_BAT12V_SW(1); delay_ms(10); //Open the power of XUAN BIAN RESOVER.
  118  1        SET_AD2S_RESET(1); delay_ms(10);
  119  1        
  120  1        // Motor control OFF
  121  1        set_motor_ctrl_enable(0);
  122  1        
  123  1        // VCC5 for Torque sensor ON.(The connector VCC5)
  124  1        SET_VCC5_SS(1);
  125  1        
  126  1        //TLE9180D-31QK: -INH
  127  1        SET_SCDL_DIS(0);
  128  1        
  129  1        //////////////////////////////////////////////////////
  130  1        // EEPROM Init
  131  1        g_sys_dtc_uw |= eeprom_init();
  132  1        
  133  1        //////////////////////////////////////////////////////
  134  1        // Init the resolver decoder
  135  1        //resolver_ad2s_init(0);
  136  1        
  137  1        // PWM Init
  138  1        //pwm_init();
  139  1        
  140  1        //////////////////////////////////////////////////////
  141  1        // Motor control OFF (But enable)
  142  1        //set_motor_ctrl_enable(1);
  143  1        
  144  1        //////////////////////////////////////////////////////
  145  1      }
  146         
  147         ////////////////////////////////////////////////////////////////////////////////
  148         //
  149         ////////////////////////////////////////////////////////////////////////////////
  150         void app_10ms_task(void)
  151         {
  152  1        diag_timer_10ms_hook();
  153  1        // Reset watchdog timer
  154  1        _srvwdt_();
  155  1        
  156  1        /////////////////////////////////////////////////
  157  1        isr_10ms_hook_user();
  158  1        
  159  1        do_boff_recovery();
  160  1        DEBUG_VAL = GET_IGN();
  161  1        /////////////////////////////////////////////////
  162  1        // IGN Off?
  163  1        if(!GET_IGN())
  164  1        {
  165  2          // Save something to EEPROM...
  166  2          // power_down_hook_user();
  167  2          SET_BAT12V_SW(0);
  168  2          
  169  2          keep_alive(0);  
  170  2        }
  171  1        /////////////////////////////////////////////////
  172  1      }
  173         
  174         ////////////////////////////////////////////////////////////////////////////////
  175         //
C166 COMPILER V7.57.0, MAIN                                                                12/26/2020 15:24:03 PAGE 4   

  176         ////////////////////////////////////////////////////////////////////////////////
  177         void app_5ms_task(void)
  178         {
  179  1        isr_5ms_hook_user();
  180  1      }
  181         
  182         ////////////////////////////////////////////////////////////////////////////////
  183         //
  184         ////////////////////////////////////////////////////////////////////////////////
  185         void app_mainloop_task(void)
  186         {
  187  1      #ifdef WIN32
                delay_ms_pc(1);
                do_vcan_msg();
              #endif
  191  1        //////////////////////////////////////////////////////
  192  1        //
  193  1        diag_main_loop_hook(); 
  194  1      }
  195         ////////////////////////////////////////////////////////////////////////////////
C166 COMPILER V7.57.0, MAIN                                                                12/26/2020 15:24:03 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 47
0000 DA000000 R    CALLS     SEG (app_init),app_init
                                           ; SOURCE LINE # 49
0004         ?C0003:
                                           ; SOURCE LINE # 53
0004 F3F80000 E    MOVB      RL4,g_overflow_5ms_ub
0008 4981          CMPB      RL4,#01H
000A 3D1E          JMPR      cc_NZ,?C0005
                                           ; SOURCE LINE # 55
000C F78E0000 E    MOVB      g_overflow_5ms_ub,ZEROS
                                           ; SOURCE LINE # 56
0010 DA000000 R    CALLS     SEG (app_5ms_task),app_5ms_task
                                           ; SOURCE LINE # 58
0014 DA000000 E    CALLS     SEG (get_disp_sensor0),get_disp_sensor0
0018 F6F41000 R    MOV       TryValue1,R4
                                           ; SOURCE LINE # 59
001C DA000000 E    CALLS     SEG (get_mc_pressure),get_mc_pressure
0020 F6F40E00 R    MOV       TryValue2,R4
                                           ; SOURCE LINE # 60
0024 DA000000 E    CALLS     SEG (get_brk_pedal_state),get_brk_pedal_state
0028 F6F40C00 R    MOV       TryValue3,R4
                                           ; SOURCE LINE # 61
002C F2F40000 E    MOV       R4,g_disp_value_sent
0030 F6F40A00 R    MOV       TryValue4,R4
                                           ; SOURCE LINE # 65
0034 DA000000 E    CALLS     SEG (get_motor_angle_m),get_motor_angle_m
0038 F6F40600 R    MOV       TryValue6,R4
                                           ; SOURCE LINE # 74
003C DA000000 E    CALLS     SEG (get_motor_total_angle),get_motor_total_angle
0040 F6F41400 R    MOV       TryValue13,R4
0044 F6F51600 R    MOV       TryValue13+02H,R5
                                           ; SOURCE LINE # 76
0048         ?C0005:
                                           ; SOURCE LINE # 80
0048 F3F80000 E    MOVB      RL4,g_overflow_10ms_ub
004C 4981          CMPB      RL4,#01H
004E 3D04          JMPR      cc_NZ,?C0006
                                           ; SOURCE LINE # 82
0050 F78E0000 E    MOVB      g_overflow_10ms_ub,ZEROS
                                           ; SOURCE LINE # 83
0054 DA000000 R    CALLS     SEG (app_10ms_task),app_10ms_task
                                           ; SOURCE LINE # 84
0058         ?C0006:
                                           ; SOURCE LINE # 88
0058 DA000000 R    CALLS     SEG (app_mainloop_task),app_mainloop_task
                                           ; SOURCE LINE # 91
005C 0DD3          JMPR      cc_UC,?C0003
             ; FUNCTION main (END    RMASK = @0x7FFF)

             ; FUNCTION app_init (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 102
005E DA000000 E    CALLS     SEG (hw_init),hw_init
                                           ; SOURCE LINE # 105
0062 DA000000 E    CALLS     SEG (diag_hw_init),diag_hw_init
                                           ; SOURCE LINE # 109
0066 B54AB5B5      EINIT     
C166 COMPILER V7.57.0, MAIN                                                                12/26/2020 15:24:03 PAGE 6   

                                           ; SOURCE LINE # 113
006A E018          MOV       R8,#01H
006C DA000000 E    CALLS     SEG (keep_alive),keep_alive
                                           ; SOURCE LINE # 117
0070 4FDB          BSET      P10_OUT_P4
0072 E0A8          MOV       R8,#0AH
0074 DA000000 E    CALLS     SEG (delay_ms),delay_ms
                                           ; SOURCE LINE # 118
0078 3FD8          BSET      P7_OUT_P3
007A E0A8          MOV       R8,#0AH
007C DA000000 E    CALLS     SEG (delay_ms),delay_ms
                                           ; SOURCE LINE # 121
0080 E008          MOV       R8,#00H
0082 DA000000 E    CALLS     SEG (set_motor_ctrl_enable),set_motor_ctrl_enable
                                           ; SOURCE LINE # 124
0086 4FD8          BSET      P7_OUT_P4
                                           ; SOURCE LINE # 127
0088 2ED3          BCLR      P2_OUT_P2
                                           ; SOURCE LINE # 131
008A DA000000 E    CALLS     SEG (eeprom_init),eeprom_init
008E C084          MOVBZ     R4,RL4
0090 74F40000 E    OR        g_sys_dtc_uw,R4
                                           ; SOURCE LINE # 145
0094 DB00          RETS      
             ; FUNCTION app_init (END    RMASK = @0x7FFF)

             ; FUNCTION app_10ms_task (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 152
0096 DA000000 E    CALLS     SEG (diag_timer_10ms_hook),diag_timer_10ms_hook
                                           ; SOURCE LINE # 154
009A A758A7A7      SRVWDT    
                                           ; SOURCE LINE # 157
009E DA000000 E    CALLS     SEG (isr_10ms_hook_user),isr_10ms_hook_user
                                           ; SOURCE LINE # 159
00A2 DA000000 E    CALLS     SEG (do_boff_recovery),do_boff_recovery
                                           ; SOURCE LINE # 160
00A6 4AC4F410      BMOV      R4.0,P4_IN_P1
00AA 6841          AND       R4,#01H
00AC F6F41200 R    MOV       DEBUG_VAL,R4
                                           ; SOURCE LINE # 163
00B0 8AC40410      JB        P4_IN_P1,?C0007
                                           ; SOURCE LINE # 167
00B4 4EDB          BCLR      P10_OUT_P4
                                           ; SOURCE LINE # 169
00B6 E008          MOV       R8,#00H
00B8 DA000000 E    CALLS     SEG (keep_alive),keep_alive
                                           ; SOURCE LINE # 170
00BC         ?C0007:
00BC DB00          RETS      
             ; FUNCTION app_10ms_task (END    RMASK = @0x7FFF)

             ; FUNCTION app_5ms_task (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 179
00BE DA000000 E    CALLS     SEG (isr_5ms_hook_user),isr_5ms_hook_user
                                           ; SOURCE LINE # 180
00C2 DB00          RETS      
             ; FUNCTION app_5ms_task (END    RMASK = @0x7FFF)

             ; FUNCTION app_mainloop_task (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 185
C166 COMPILER V7.57.0, MAIN                                                                12/26/2020 15:24:03 PAGE 7   

                                           ; SOURCE LINE # 193
00C4 DA000000 E    CALLS     SEG (diag_main_loop_hook),diag_main_loop_hook
                                           ; SOURCE LINE # 194
00C8 DB00          RETS      
             ; FUNCTION app_mainloop_task (END    RMASK = @0x7FFF)



MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         202     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          30     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          78     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
