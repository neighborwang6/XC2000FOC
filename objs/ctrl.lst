C166 COMPILER V7.57.0, CTRL                                                                12/14/2020 10:56:41 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE CTRL
OBJECT MODULE PLACED IN .\objs\ctrl.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\ctrl.c MODV2 LARGE BROWSE INCDIR(.\src\hardware;.\src;.\EOL_Diag;.
                    -\DTC_Diag;.\Hw_Driver;.\CalTool;.\DTC_Diag\mcu2_prot;./CAN_Driver;.\xcp;.\src\include;.\EBS_Ctrl_Logic) MODV2 DEBUG CODE
                    - PRINT(.\objs\ctrl.lst) TABS(2) OBJECT(.\objs\ctrl.obj) 

 stmt lvl     source

    1         ////////////////////////////////////////////////////////////////////////////////
    2         /**************************************************
    3         *    File Name    : ctrl.c
    4         *    Copyright    : QingChen
    5         *    Module Name  : Electric Power Steering
    6              *
    7         *    CPU          : XC2000
    8         *    RTOS         : No RTOS
    9         *
   10         *    Create Date  : 2019.11.14
   11         *    Author/Cororation: Perfersor YLY
   12         *    Abstract Description:
   13         *
   14         *--------------- Revision History --------------
   15         *    No Version Date      Revisied By  Item    Description
   16         *    1  V0.0    19.11.26  WGY                  eBooster
   17         **************************************************/
   18         
   19         /**************************************************
   20         *    Debug switch Section
   21         **************************************************/
   22         //#define PRESURE_PID_CTRL
   23         /**************************************************
   24         *    Include File Section
   25         **************************************************/
   26         #include "ctrl.h"
   27         #include "ctrl_if.h"
   28         #include "motor_if.h"
   29         #include "motor_pmsm.h"
   30         #include "hw.h"
   31         #include "adc.h"
   32         #include "can_if.h"
   33         
   34         #include "Filters_EbsSensors.h"
   35         #include "ebooster_ctrl.h"
   36         #include "MotorDrive.h"
   37         #include "pid.h"
   38         #include "tle9180d_31qk.h"
   39         
   40         /**************************************************
   41         *    MacroDefine Section
   42         **************************************************/
   43         
   44         /**************************************************
   45         *    StructDefine Section
   46         **************************************************/
   47         
   48         /**************************************************
   49         *    Prototype Declare Section
   50         **************************************************/
   51         enum
   52         {
   53           MOTOR_FORWORD = 0,
C166 COMPILER V7.57.0, CTRL                                                                12/14/2020 10:56:41 PAGE 2   

   54           MOTOR_BACKWARD = 1,
   55           MOTOR_HOLD = 2
   56         
   57         };
   58         /**************************************************
   59         *    Global Variable Declare Section
   60         **************************************************/
   61         u16 TryVqs=0;
   62         u16 test_dir=0;
   63         u16 motor_offset=630;
   64         const u16 C_VAL_DISP_INITIAL = 1900;
   65         u16 g_mc_pressure;  //The Hydraulic master cylinder's preasure - RT 5ms per scan.
   66         extern u16 g_disp_value_sent; //Relative Displacement - RT (Origional:CC2_CC22(PWM_EX3)) Relstive Displace
             -ment define in ccu2_ccu6.c
   67         
   68         
   69         PID_st g_pid_pres_ctrl;  //PID controller required parameter structure.
   70         ////////////////////////////////////////////////////////////////////////////////
   71         // Variables that sent to CAN
   72         extern u16 g_pres_sense_val;  //The Hydraulic master cylinder's preasure value after filtrate.
   73         extern u32 g_disp_sense_val;  //The Relative Displacement value after filtrate.
   74         
   75         extern float DisplacementSenseMM;
   76         extern u16 Voltagecal,Voltage;
   77         extern u16 PressureAVE;
   78         extern float Eerror;
   79         extern float sum_error;
   80         extern float Derror;
   81         extern float e_error_0;
   82         extern float Eerror_pre;
   83         extern u16 MotorState;  //The direction of the moto rotation.
   84         extern u16 TryValue1,TryValue2,TryValue3,TryValue4;
   85         
   86         /**************************************************
   87         *    File Static Variable Define Section
   88         **************************************************/
   89         
   90         /**************************************************
   91         *    Function Define Section
   92         **************************************************/
   93         
   94         ////////////////////////////////////////////////////////////////////////////////
   95         // 5ms task
   96         ////////////////////////////////////////////////////////////////////////////////
   97         u16 g_ctrl_test_timer_uw=0;
   98         
   99         ////////////////////////////////////////////////////////////////////////////////
  100         //
  101         ////////////////////////////////////////////////////////////////////////////////
  102         u8 isr_5ms_hook_user(void)
  103         {
  104  1        spi_tle9180d_31qk_trans(0xaaaa);
  105  1        
  106  1        #ifdef PRESURE_PID_CTRL
                // Sensor measurement...
                g_mc_pressure=get_mc_pressure();  //Gei the Mc Preseaure
              
                // Signal filtering...
                filter_pres_sense(g_mc_pressure);
                filter_disp_sense(g_disp_value_sent);
                
                // Control logic...
C166 COMPILER V7.57.0, CTRL                                                                12/14/2020 10:56:41 PAGE 3   

                //DoEboosterCtrl();
                
                
                // Control output...
                MotorDrive();
                #else
  121  1        switch(g_ctrl_test_timer_uw)
  122  1        {
  123  2        case 0:
  124  2          break;
  125  2      
  126  2        case 100:
  127  2          //motor_offset=630;
  128  2          set_motor_ctrl_enable(2);
  129  2          set_motor_volt(TryVqs); // 1V
  130  2          set_motor_dir(test_dir);//0;
  131  2          set_motor_offset(motor_offset);//630
  132  2          break;
  133  2          
  134  2        case 500:
  135  2          set_motor_dir(1);
  136  2          set_motor_offset(550);//550
  137  2          break;
  138  2          
  139  2        case 900:
  140  2          set_motor_ctrl_enable(0);
  141  2          break;
  142  2        }
  143  1      
  144  1        #endif
  145  1        return 0;
  146  1      }
  147         
  148         ////////////////////////////////////////////////////////////////////////////////
  149         //
  150         ////////////////////////////////////////////////////////////////////////////////
  151         u8 isr_10ms_hook_user(void)
  152         {
  153  1        
  154  1        return 0;
  155  1        
  156  1      }
  157         
  158         ////////////////////////////////////////////////////////////////////////////////
  159         //
  160         ////////////////////////////////////////////////////////////////////////////////
  161         u8 isr_1ms_hook_user(void)
  162         {
  163  1        // Test only: FIXME: yly
  164  1        static u8 tmx=0;
  165  1      
  166  1        transmit_can_data_1ms();
  167  1      
  168  1        if((++tmx)>=10)
  169  1        {
  170  2          tmx=0;
  171  2          transmit_can_data_10ms();
  172  2        }
  173  1      
  174  1        return 0;
  175  1      }
  176         
C166 COMPILER V7.57.0, CTRL                                                                12/14/2020 10:56:41 PAGE 4   

  177         ////////////////////////////////////////////////////////////////////////////////
  178         //
  179         ////////////////////////////////////////////////////////////////////////////////
  180         u8 can_do_obj(u32 id,u8 cfg,u8 far *buf)
  181         {
  182  1        UNUSED_PARA(cfg);
  183  1        
  184  1        // Test only: Command message from master controller, e.g. VCU, ESC, etc.)
  185  1        if(id!=0x888)
  186  1          return 1;
  187  1      
  188  1        g_brake_pedal_pos_can_uw=buf[1]; // 8-bit
  189  1        g_brake_pedal_pos_can_uw<<=2;    // adjust to 10-bit
  190  1      
  191  1        return 0;
  192  1      }
  193         
  194         ////////////////////////////////////////////////////////////////////////////////
  195         //
  196         ////////////////////////////////////////////////////////////////////////////////
  197         void transmit_can_data_10ms(void)
  198         {
  199  1          u8 bufx[8];
  200  1        
  201  1        ////////////////////////////////////////////////////////////////////////////
  202  1        //bufx[0]=(u8)(get_ad_value(AD_VCC5B_MON)>>2);
  203  1        //bufx[1]=(u8)(get_ad_value(AD_BAT12V_MONY)>>2);
  204  1        //bufx[2]=(u8)(get_ad_value(AD_TEMP_SS1)>>2);
  205  1        //bufx[3]=(u8)(get_ad_value(AD_VCC5_SW_MON)>>2);
  206  1        //bufx[4]=(u8)(get_ad_value(AD_BAT12V_MON)>>2);
  207  1        //bufx[5]=(u8)(get_ad_value(AD_AIN4)>>2);
  208  1        //bufx[6]=(u8)(get_ad_value(AD_AIN3)>>2);
  209  1        //bufx[7]=(u8)(get_ad_value(AD_VO1)>>2);
  210  1      
  211  1        //bufx[0]=((u8)(((u16)(DisplacementSenseMM))>>8));
  212  1        //bufx[1]=((u8)(((u16)(DisplacementSenseMM))&0xFF));
  213  1        //bufx[2]=(u8)(Voltage>>8);
  214  1        //bufx[3]=(u8)(Voltage&0xff);
  215  1        //bufx[4]=(u8)(PressureAVE>>8);
  216  1        //bufx[5]=(u8)(PressureAVE&0xff);
  217  1        //bufx[6]=((u8)(((u16)(Eerror))>>8));
  218  1        //bufx[7]=((u8)(((u16)(Eerror))&0xFF));
  219  1        
  220  1        
  221  1        //can_sload(7,bufx);  //0x105
  222  1        //can_stx(7);
  223  1          
  224  1        ////////////////////////////////////////////////////////////////////////////
  225  1        //bufx[0]=(u8)(MotorState);
  226  1        //bufx[1]=(u8)(1);
  227  1        //bufx[2]=(u8)(2);
  228  1        //bufx[3]=(u8)(3);
  229  1        //bufx[4]=(u8)(4);
  230  1        //bufx[5]=(u8)(5);
  231  1        //bufx[6]=(u8)(6);
  232  1        //bufx[7]=(u8)(7);
  233  1      
  234  1        //can_sload(8,bufx);  //0x106
  235  1        //can_stx(8);
  236  1        
  237  1        ////////////////////////////////////////////////////////////////////////////
  238  1        //bufx[0]=(u8)(g_angle_eiq);
C166 COMPILER V7.57.0, CTRL                                                                12/14/2020 10:56:41 PAGE 5   

  239  1        //bufx[1]=(u8)(g_angle_eiq>>8);
  240  1        //bufx[2]=(u8)(g_total_angle_sl);
  241  1        //bufx[3]=(u8)(g_total_angle_sl>>8);
  242  1        //bufx[4]=(u8)(g_mot_speed_sw);
  243  1        //bufx[5]=(u8)(g_mot_speed_sw>>8);
  244  1        //bufx[6]=(u8)(g_dir_ub);
  245  1        //bufx[7]=(u8)(g_resolver_pos_uw/683);
  246  1        
  247  1          //can_sload(9,bufx);
  248  1          //can_stx(9);
  249  1            ////////////////////////////////////////////////////////////////////////////
  250  1        bufx[0]=(u8)(1);
  251  1        bufx[1]=(u8)(2);
  252  1        bufx[2]=(u8)(3);
  253  1        bufx[3]=(u8)(4);
  254  1        bufx[4]=(u8)(5);
  255  1        bufx[5]=(u8)(6);
  256  1        bufx[6]=(u8)(7);
  257  1        bufx[7]=(u8)(8);
  258  1        
  259  1        can_sload(16,bufx);
  260  1        can_stx(16);
  261  1        
  262  1        bufx[0]=(u8)(1);
  263  1        bufx[1]=(u8)(2);
  264  1        bufx[2]=(u8)(3);
  265  1        bufx[3]=(u8)(4);
  266  1        bufx[4]=(u8)(5);
  267  1        bufx[5]=(u8)(6);
  268  1        bufx[6]=(u8)(7);
  269  1        bufx[7]=(u8)(8);
  270  1        
  271  1        can_sload(17,bufx);
  272  1        can_stx(17);
  273  1        
  274  1        bufx[0]=(u8)(1);
  275  1        bufx[1]=(u8)(2);
  276  1        bufx[2]=(u8)(3);
  277  1        bufx[3]=(u8)(4);
  278  1        bufx[4]=(u8)(5);
  279  1        bufx[5]=(u8)(6);
  280  1        bufx[6]=(u8)(7);
  281  1        bufx[7]=(u8)(8);
  282  1        
  283  1        can_sload(18,bufx);
  284  1        can_stx(18);
  285  1        
  286  1        bufx[0]=(u8)(1);
  287  1        bufx[1]=(u8)(2);
  288  1        bufx[2]=(u8)(3);
  289  1        bufx[3]=(u8)(4);
  290  1        bufx[4]=(u8)(5);
  291  1        bufx[5]=(u8)(6);
  292  1        bufx[6]=(u8)(7);
  293  1        bufx[7]=(u8)(8);
  294  1        
  295  1        can_sload(19,bufx);
  296  1        can_stx(19);
  297  1        ////////////////////////////////////////////////////////////////////////////
  298  1      }
  299         
  300         ////////////////////////////////////////////////////////////////////////////////
C166 COMPILER V7.57.0, CTRL                                                                12/14/2020 10:56:41 PAGE 6   

  301         //
  302         ////////////////////////////////////////////////////////////////////////////////
  303         void transmit_can_data_1ms(void)
  304         {
  305  1        /*
  306  1        u8 bufx[8];
  307  1        
  308  1        ////////////////////////////////////////////////////////////////////////////
  309  1        bufx[0]=(u8)(g_resolver_pos_uw);
  310  1        bufx[1]=(u8)(g_resolver_pos_uw>>8);
  311  1        bufx[2]=(u8)(g_duty_A/10);
  312  1        bufx[3]=(u8)(g_duty_B/10);
  313  1        bufx[4]=(u8)(g_duty_C/10);
  314  1        bufx[5]=(u8)(g_angle_eiq);
  315  1        bufx[6]=(u8)(g_angle_eiq>>8);
  316  1        bufx[7]=0;
  317  1        
  318  1          can_sload(4,bufx);
  319  1          can_stx(4);
  320  1      
  321  1        ////////////////////////////////////////////////////////////////////////////
  322  1        // bufx[0]=(u8)(g_pwm_ex_duty_uw[0]);
  323  1        // bufx[1]=(u8)(g_pwm_ex_duty_uw[0]>>8);
  324  1        // bufx[2]=(u8)(g_pwm_ex_duty_uw[1]);
  325  1        // bufx[3]=(u8)(g_pwm_ex_duty_uw[1]>>8);
  326  1        // bufx[4]=(u8)(g_pwm_ex_duty_uw[2]);
  327  1        // bufx[5]=(u8)(g_pwm_ex_duty_uw[2]>>8);
  328  1        // bufx[6]=(u8)(g_pwm_ex_duty_uw[3]);
  329  1        // bufx[7]=(u8)(g_pwm_ex_duty_uw[3]>>8);
  330  1      
  331  1        bufx[0]=(u8)(Vqs_cmd/100);
  332  1        bufx[1]=(u8)(g_angle_offset/10);
  333  1        bufx[2]=(u8)(V.Alpha/10); // 0.01V/bit
  334  1        bufx[3]=(u8)(V.Beta/10);  // 0.01V/bit
  335  1        bufx[4]=(u8)(V.VecSector);
  336  1        bufx[5]=(u8)(V.T0/10);
  337  1        bufx[6]=(u8)(V.T1/10);
  338  1        bufx[7]=(u8)(V.T2/10);
  339  1      
  340  1          can_sload(5,bufx);
  341  1          can_stx(5);
  342  1      
  343  1        ////////////////////////////////////////////////////////////////////////////
  344  1        bufx[0]=(u8)(get_ad_value(AD_SCDL)>>2);
  345  1        bufx[1]=(u8)(GET_TLE_ERR2());
  346  1        bufx[1]<<=1;
  347  1        bufx[1]|=(GET_TLE_ERR1());
  348  1        bufx[2]=(u8)(get_ad_value(AD_BAT12V_SW)>>2);
  349  1        // bufx[3]=(u8)(get_ad_value(AD_VRO)>>2);
  350  1        // bufx[4]=(u8)(get_ad_value(AD_VO2)>>2);
  351  1        bufx[3]=(u8)(get_ad_value(AD_VO2));
  352  1        bufx[4]=(u8)(get_ad_value(AD_VO2)>>8);
  353  1        bufx[5]=(u8)(get_ad_value(AD_SH1_MON)>>2);
  354  1        bufx[6]=(u8)(get_ad_value(AD_SH2_MON)>>2);
  355  1        bufx[7]=(u8)(get_ad_value(AD_SH3_MON)>>2);
  356  1        
  357  1          can_sload(6,bufx);
  358  1          can_stx(6);
  359  1          */
  360  1        ////////////////////////////////////////////////////////////////////////////
  361  1      }
  362         
C166 COMPILER V7.57.0, CTRL                                                                12/14/2020 10:56:41 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION isr_5ms_hook_user (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 104
0000 E6F8AAAA      MOV       R8,#0AAAAH
0004 DA000000 E    CALLS     SEG (spi_tle9180d_31qk_trans),spi_tle9180d_31qk_trans
                                           ; SOURCE LINE # 121
0008 F2F40400 R    MOV       R4,g_ctrl_test_timer_uw
000C 06F40CFE      ADD       R4,#0FE0CH
0010 2D16          JMPR      cc_Z,?C0004
0012 06F470FE      ADD       R4,#0FE70H
0016 2D1B          JMPR      cc_Z,?C0005
0018 06F42003      ADD       R4,#0320H
001C 3D1B          JMPR      cc_NZ,?C0001
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 126
001E         ?C0003:
                                           ; SOURCE LINE # 128
001E E028          MOV       R8,#02H
0020 DA000000 E    CALLS     SEG (set_motor_ctrl_enable),set_motor_ctrl_enable
                                           ; SOURCE LINE # 129
0024 F2F80000 R    MOV       R8,TryVqs
0028 DA000000 E    CALLS     SEG (set_motor_volt),set_motor_volt
                                           ; SOURCE LINE # 130
002C F2F80600 R    MOV       R8,test_dir
0030 DA000000 E    CALLS     SEG (set_motor_dir),set_motor_dir
                                           ; SOURCE LINE # 131
0034 F2F80800 R    MOV       R8,motor_offset
0038 DA000000 E    CALLS     SEG (set_motor_offset),set_motor_offset
                                           ; SOURCE LINE # 132
003C 0D0B          JMPR      cc_UC,?C0001
                                           ; SOURCE LINE # 134
003E         ?C0004:
                                           ; SOURCE LINE # 135
003E E018          MOV       R8,#01H
0040 DA000000 E    CALLS     SEG (set_motor_dir),set_motor_dir
                                           ; SOURCE LINE # 136
0044 E6F82602      MOV       R8,#0226H
0048 DA000000 E    CALLS     SEG (set_motor_offset),set_motor_offset
                                           ; SOURCE LINE # 137
004C 0D03          JMPR      cc_UC,?C0001
                                           ; SOURCE LINE # 139
004E         ?C0005:
                                           ; SOURCE LINE # 140
004E E008          MOV       R8,#00H
0050 DA000000 E    CALLS     SEG (set_motor_ctrl_enable),set_motor_ctrl_enable
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
0054         ?C0001:
                                           ; SOURCE LINE # 145
0054 E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 146
0056 DB00          RETS      
             ; FUNCTION isr_5ms_hook_user (END    RMASK = @0x7FFF)

             ; FUNCTION isr_10ms_hook_user (BEGIN  RMASK = @0x0010)
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 154
0058 E108          MOVB      RL4,#00H
C166 COMPILER V7.57.0, CTRL                                                                12/14/2020 10:56:41 PAGE 8   

                                           ; SOURCE LINE # 156
005A DB00          RETS      
             ; FUNCTION isr_10ms_hook_user (END    RMASK = @0x0010)

             ; FUNCTION isr_1ms_hook_user (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 166
005C DA000000 R    CALLS     SEG (transmit_can_data_1ms),transmit_can_data_1ms
                                           ; SOURCE LINE # 168
0060 258F0A00 R    SUBB      tmx,ONES
0064 F3F80A00 R    MOVB      RL4,tmx
0068 47F80A00      CMPB      RL4,#0AH
006C 8D04          JMPR      cc_ULT,?C0008
                                           ; SOURCE LINE # 170
006E F78E0A00 R    MOVB      tmx,ZEROS
                                           ; SOURCE LINE # 171
0072 DA000000 R    CALLS     SEG (transmit_can_data_10ms),transmit_can_data_10ms
                                           ; SOURCE LINE # 172
0076         ?C0008:
                                           ; SOURCE LINE # 174
0076 E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 175
0078 DB00          RETS      
             ; FUNCTION isr_1ms_hook_user (END    RMASK = @0x7FFF)

             ; FUNCTION can_do_obj (BEGIN  RMASK = @0x4310)
                                           ; SOURCE LINE # 180
;---- Variable 'buf' assigned to Register 'R11/R12' ----
;---- Variable 'cfg' assigned to Register 'R10' ----
;---- Variable 'id' assigned to Register 'R8/R9' ----
                                           ; SOURCE LINE # 185
007A 26F88808      SUB       R8,#0888H
007E 3890          SUBC      R9,#00H
0080 2D02          JMPR      cc_Z,?C0010
                                           ; SOURCE LINE # 186
0082 E118          MOVB      RL4,#01H
0084 DB00          RETS      
0086         ?C0010:
                                           ; SOURCE LINE # 188
0086 DC4C          EXTP      R12,#01H
0088 F48B0100      MOVB      RL4,[R11+#POF(01H)]
008C C084          MOVBZ     R4,RL4
008E F6F40000 E    MOV       g_brake_pedal_pos_can_uw,R4
                                           ; SOURCE LINE # 189
0092 5C24          SHL       R4,#02H
0094 F6F40000 E    MOV       g_brake_pedal_pos_can_uw,R4
                                           ; SOURCE LINE # 191
0098 E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 192
009A         ?C0011:
009A DB00          RETS      
             ; FUNCTION can_do_obj (END    RMASK = @0x4310)

             ; FUNCTION transmit_can_data_10ms (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 197
009C 06F0F8FF      ADD       R0,#0FFF8H
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 250
00A0 E118          MOVB      RL4,#01H
00A2 B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 251
C166 COMPILER V7.57.0, CTRL                                                                12/14/2020 10:56:41 PAGE 9   

00A4 E128          MOVB      RL4,#02H
00A6 E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 252
00AA E138          MOVB      RL4,#03H
00AC E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 253
00B0 E148          MOVB      RL4,#04H
00B2 E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 254
00B6 E158          MOVB      RL4,#05H
00B8 E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 255
00BC E168          MOVB      RL4,#06H
00BE E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 256
00C2 E178          MOVB      RL4,#07H
00C4 E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 257
00C8 E188          MOVB      RL4,#08H
00CA E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 259
00CE F090          MOV       R9,R0
00D0 66F9FF3F      AND       R9,#03FFFH
00D4 F2FA04FE      MOV       R10,DPP2
00D8 E6F81000      MOV       R8,#010H
00DC DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 260
00E0 E6F81000      MOV       R8,#010H
00E4 DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 262
00E8 E118          MOVB      RL4,#01H
00EA B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 263
00EC E128          MOVB      RL4,#02H
00EE E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 264
00F2 E138          MOVB      RL4,#03H
00F4 E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 265
00F8 E148          MOVB      RL4,#04H
00FA E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 266
00FE E158          MOVB      RL4,#05H
0100 E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 267
0104 E168          MOVB      RL4,#06H
0106 E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 268
010A E178          MOVB      RL4,#07H
010C E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 269
0110 E188          MOVB      RL4,#08H
0112 E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 271
0116 F090          MOV       R9,R0
0118 66F9FF3F      AND       R9,#03FFFH
011C F2FA04FE      MOV       R10,DPP2
0120 E6F81100      MOV       R8,#011H
0124 DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 272
0128 E6F81100      MOV       R8,#011H
012C DA000000 E    CALLS     SEG (can_stx),can_stx
C166 COMPILER V7.57.0, CTRL                                                                12/14/2020 10:56:41 PAGE 10  

                                           ; SOURCE LINE # 274
0130 E118          MOVB      RL4,#01H
0132 B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 275
0134 E128          MOVB      RL4,#02H
0136 E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 276
013A E138          MOVB      RL4,#03H
013C E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 277
0140 E148          MOVB      RL4,#04H
0142 E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 278
0146 E158          MOVB      RL4,#05H
0148 E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 279
014C E168          MOVB      RL4,#06H
014E E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 280
0152 E178          MOVB      RL4,#07H
0154 E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 281
0158 E188          MOVB      RL4,#08H
015A E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 283
015E F090          MOV       R9,R0
0160 66F9FF3F      AND       R9,#03FFFH
0164 F2FA04FE      MOV       R10,DPP2
0168 E6F81200      MOV       R8,#012H
016C DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 284
0170 E6F81200      MOV       R8,#012H
0174 DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 286
0178 E118          MOVB      RL4,#01H
017A B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 287
017C E128          MOVB      RL4,#02H
017E E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 288
0182 E138          MOVB      RL4,#03H
0184 E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 289
0188 E148          MOVB      RL4,#04H
018A E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 290
018E E158          MOVB      RL4,#05H
0190 E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 291
0194 E168          MOVB      RL4,#06H
0196 E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 292
019A E178          MOVB      RL4,#07H
019C E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 293
01A0 E188          MOVB      RL4,#08H
01A2 E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 295
01A6 F090          MOV       R9,R0
01A8 66F9FF3F      AND       R9,#03FFFH
01AC F2FA04FE      MOV       R10,DPP2
01B0 E6F81300      MOV       R8,#013H
C166 COMPILER V7.57.0, CTRL                                                                12/14/2020 10:56:41 PAGE 11  

01B4 DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 296
01B8 E6F81300      MOV       R8,#013H
01BC DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 298
01C0 06F00800      ADD       R0,#08H
01C4 DB00          RETS      
             ; FUNCTION transmit_can_data_10ms (END    RMASK = @0x7FFF)

             ; FUNCTION transmit_can_data_1ms (BEGIN  RMASK = @0x8000)
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 361
01C6 DB00          RETS      
             ; FUNCTION transmit_can_data_1ms (END    RMASK = @0x8000)



MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         456     --------
  NEAR-CONST SIZE  =           2     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          11     --------
  FAR-DATA SIZE    =          88     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          30     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
