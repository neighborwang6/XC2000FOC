C166 COMPILER V7.57.0, CTRL                                                                01/03/2020 16:20:11 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE CTRL
OBJECT MODULE PLACED IN .\objs\ctrl.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\ctrl.c MODV2 LARGE BROWSE INCDIR(.\src\hardware;.\src;.\EOL_Diag;.
                    -\DTC_Diag;.\Hw_Driver;.\CalTool;.\DTC_Diag\mcu2_prot;./CAN_Driver;.\xcp;.\src\include;.\EBS_Ctrl_Logic) MODV2 DEBUG CODE
                    - PRINT(.\objs\ctrl.lst) TABS(2) OBJECT(.\objs\ctrl.obj) 

 stmt lvl     source

    1         ////////////////////////////////////////////////////////////////////////////////
    2         /**************************************************
    3         *    File Name    : ctrl.c
    4         *    Copyright    : QingChen
    5         *    Module Name  : Electric Power Steering
    6              *
    7         *    CPU          : XC2000
    8         *    RTOS         : No RTOS
    9         *
   10         *    Create Date  : 2019.11.14
   11         *    Author/Cororation: Perfersor YLY
   12         *    Abstract Description:
   13         *
   14         *--------------- Revision History --------------
   15         *    No Version Date      Revisied By  Item    Description
   16         *    1  V0.0    19.11.26  WGY                  eBooster
   17         **************************************************/
   18         
   19         /**************************************************
   20         *    Debug switch Section
   21         **************************************************/
   22         //#define PRESURE_PID_CTRL
   23         /**************************************************
   24         *    Include File Section
   25         **************************************************/
   26         #include "ctrl.h"
   27         #include "ctrl_if.h"
   28         #include "motor_if.h"
   29         #include "motor_pmsm.h"
   30         #include "hw.h"
   31         #include "adc.h"
   32         #include "can_if.h"
   33         
   34         #include "Filters_EbsSensors.h"
   35         #include "ebooster_ctrl.h"
   36         #include "MotorDrive.h"
   37         #include "pid.h"
   38         
   39         /**************************************************
   40         *    MacroDefine Section
   41         **************************************************/
   42         
   43         /**************************************************
   44         *    StructDefine Section
   45         **************************************************/
   46         
   47         /**************************************************
   48         *    Prototype Declare Section
   49         **************************************************/
   50         enum
   51         {
   52           MOTOR_FORWORD = 0,
   53           MOTOR_BACKWARD = 1,
C166 COMPILER V7.57.0, CTRL                                                                01/03/2020 16:20:11 PAGE 2   

   54           MOTOR_HOLD = 2
   55         
   56         };
   57         /**************************************************
   58         *    Global Variable Declare Section
   59         **************************************************/
   60         u16 TryVqs=0;
   61         u16 test_dir=0;
   62         u16 motor_offset=630;
   63         const u16 C_VAL_DISP_INITIAL = 1900;
   64         u16 g_mc_pressure;  //The Hydraulic master cylinder's preasure - RT 5ms per scan.
   65         extern u16 g_disp_value_sent; //Relative Displacement - RT (Origional:CC2_CC22(PWM_EX3)) Relstive Displace
             -ment define in ccu2_ccu6.c
   66         
   67         
   68         PID_st g_pid_pres_ctrl;  //PID controller required parameter structure.
   69         ////////////////////////////////////////////////////////////////////////////////
   70         // Variables that sent to CAN
   71         extern u16 g_pres_sense_val;  //The Hydraulic master cylinder's preasure value after filtrate.
   72         extern u32 g_disp_sense_val;  //The Relative Displacement value after filtrate.
   73         
   74         extern float DisplacementSenseMM;
   75         extern u16 Voltagecal,Voltage;
   76         extern u16 PressureAVE;
   77         extern float Eerror;
   78         extern float sum_error;
   79         extern float Derror;
   80         extern float e_error_0;
   81         extern float Eerror_pre;
   82         extern u16 MotorState;  //The direction of the moto rotation.
   83         extern u16 TryValue1,TryValue2,TryValue3,TryValue4;
   84         
   85         /**************************************************
   86         *    File Static Variable Define Section
   87         **************************************************/
   88         
   89         /**************************************************
   90         *    Function Define Section
   91         **************************************************/
   92         
   93         ////////////////////////////////////////////////////////////////////////////////
   94         // 5ms task
   95         ////////////////////////////////////////////////////////////////////////////////
   96         u16 g_ctrl_test_timer_uw=0;
   97         
   98         ////////////////////////////////////////////////////////////////////////////////
   99         //
  100         ////////////////////////////////////////////////////////////////////////////////
  101         u8 isr_5ms_hook_user(void)
  102         {
  103  1        #ifdef PRESURE_PID_CTRL
                // Sensor measurement...
                g_mc_pressure=get_mc_pressure();  //Gei the Mc Preseaure
              
                // Signal filtering...
                filter_pres_sense(g_mc_pressure);
                filter_disp_sense(g_disp_value_sent);
                
                // Control logic...
                //DoEboosterCtrl();
                
                // Control output...
C166 COMPILER V7.57.0, CTRL                                                                01/03/2020 16:20:11 PAGE 3   

                MotorDrive();
                #else
  117  1        switch(g_ctrl_test_timer_uw)
  118  1        {
  119  2        case 0:
  120  2          break;
  121  2      
  122  2        case 100:
  123  2          //motor_offset=630;
  124  2          set_motor_ctrl_enable(2);
  125  2          set_motor_volt(TryVqs); // 1V
  126  2          set_motor_dir(test_dir);//0;
  127  2          set_motor_offset(motor_offset);//630
  128  2          break;
  129  2          
  130  2        case 500:
  131  2          set_motor_dir(1);
  132  2          set_motor_offset(550);//550
  133  2          break;
  134  2          
  135  2        case 900:
  136  2          set_motor_ctrl_enable(0);
  137  2          break;
  138  2        }
  139  1      
  140  1        #endif
  141  1        return 0;
  142  1      }
  143         
  144         ////////////////////////////////////////////////////////////////////////////////
  145         //
  146         ////////////////////////////////////////////////////////////////////////////////
  147         u8 isr_10ms_hook_user(void)
  148         {
  149  1        return 0;
  150  1      }
  151         
  152         ////////////////////////////////////////////////////////////////////////////////
  153         //
  154         ////////////////////////////////////////////////////////////////////////////////
  155         u8 isr_1ms_hook_user(void)
  156         {
  157  1        // Test only: FIXME: yly
  158  1        static u8 tmx=0;
  159  1      
  160  1        transmit_can_data_1ms();
  161  1      
  162  1        if((++tmx)>=10)
  163  1        {
  164  2          tmx=0;
  165  2          transmit_can_data_10ms();
  166  2        }
  167  1      
  168  1        return 0;
  169  1      }
  170         
  171         ////////////////////////////////////////////////////////////////////////////////
  172         //
  173         ////////////////////////////////////////////////////////////////////////////////
  174         u8 can_do_obj(u32 id,u8 cfg,u8 far *buf)
  175         {
  176  1        UNUSED_PARA(cfg);
C166 COMPILER V7.57.0, CTRL                                                                01/03/2020 16:20:11 PAGE 4   

  177  1        
  178  1        // Test only: Command message from master controller, e.g. VCU, ESC, etc.)
  179  1        if(id!=0x888)
  180  1          return 1;
  181  1      
  182  1        g_brake_pedal_pos_can_uw=buf[1]; // 8-bit
  183  1        g_brake_pedal_pos_can_uw<<=2;    // adjust to 10-bit
  184  1      
  185  1        return 0;
  186  1      }
  187         
  188         ////////////////////////////////////////////////////////////////////////////////
  189         //
  190         ////////////////////////////////////////////////////////////////////////////////
  191         void transmit_can_data_10ms(void)
  192         {
  193  1          u8 bufx[8];
  194  1        
  195  1        ////////////////////////////////////////////////////////////////////////////
  196  1        //bufx[0]=(u8)(get_ad_value(AD_VCC5B_MON)>>2);
  197  1        //bufx[1]=(u8)(get_ad_value(AD_BAT12V_MONY)>>2);
  198  1        //bufx[2]=(u8)(get_ad_value(AD_TEMP_SS1)>>2);
  199  1        //bufx[3]=(u8)(get_ad_value(AD_VCC5_SW_MON)>>2);
  200  1        //bufx[4]=(u8)(get_ad_value(AD_BAT12V_MON)>>2);
  201  1        //bufx[5]=(u8)(get_ad_value(AD_AIN4)>>2);
  202  1        //bufx[6]=(u8)(get_ad_value(AD_AIN3)>>2);
  203  1        //bufx[7]=(u8)(get_ad_value(AD_VO1)>>2);
  204  1      
  205  1        //bufx[0]=((u8)(((u16)(DisplacementSenseMM))>>8));
  206  1        //bufx[1]=((u8)(((u16)(DisplacementSenseMM))&0xFF));
  207  1        //bufx[2]=(u8)(Voltage>>8);
  208  1        //bufx[3]=(u8)(Voltage&0xff);
  209  1        //bufx[4]=(u8)(PressureAVE>>8);
  210  1        //bufx[5]=(u8)(PressureAVE&0xff);
  211  1        //bufx[6]=((u8)(((u16)(Eerror))>>8));
  212  1        //bufx[7]=((u8)(((u16)(Eerror))&0xFF));
  213  1        
  214  1        
  215  1        //can_sload(7,bufx);  //0x105
  216  1        //can_stx(7);
  217  1          
  218  1        ////////////////////////////////////////////////////////////////////////////
  219  1        //bufx[0]=(u8)(MotorState);
  220  1        //bufx[1]=(u8)(1);
  221  1        //bufx[2]=(u8)(2);
  222  1        //bufx[3]=(u8)(3);
  223  1        //bufx[4]=(u8)(4);
  224  1        //bufx[5]=(u8)(5);
  225  1        //bufx[6]=(u8)(6);
  226  1        //bufx[7]=(u8)(7);
  227  1      
  228  1        //can_sload(8,bufx);  //0x106
  229  1        //can_stx(8);
  230  1        
  231  1        ////////////////////////////////////////////////////////////////////////////
  232  1        //bufx[0]=(u8)(g_angle_eiq);
  233  1        //bufx[1]=(u8)(g_angle_eiq>>8);
  234  1        //bufx[2]=(u8)(g_total_angle_sl);
  235  1        //bufx[3]=(u8)(g_total_angle_sl>>8);
  236  1        //bufx[4]=(u8)(g_mot_speed_sw);
  237  1        //bufx[5]=(u8)(g_mot_speed_sw>>8);
  238  1        //bufx[6]=(u8)(g_dir_ub);
C166 COMPILER V7.57.0, CTRL                                                                01/03/2020 16:20:11 PAGE 5   

  239  1        //bufx[7]=(u8)(g_resolver_pos_uw/683);
  240  1        
  241  1          //can_sload(9,bufx);
  242  1          //can_stx(9);
  243  1            ////////////////////////////////////////////////////////////////////////////
  244  1        bufx[0]=(u8)(1);
  245  1        bufx[1]=(u8)(2);
  246  1        bufx[2]=(u8)(3);
  247  1        bufx[3]=(u8)(4);
  248  1        bufx[4]=(u8)(5);
  249  1        bufx[5]=(u8)(6);
  250  1        bufx[6]=(u8)(7);
  251  1        bufx[7]=(u8)(8);
  252  1        
  253  1        can_sload(16,bufx);
  254  1        can_stx(16);
  255  1        
  256  1        bufx[0]=(u8)(1);
  257  1        bufx[1]=(u8)(2);
  258  1        bufx[2]=(u8)(3);
  259  1        bufx[3]=(u8)(4);
  260  1        bufx[4]=(u8)(5);
  261  1        bufx[5]=(u8)(6);
  262  1        bufx[6]=(u8)(7);
  263  1        bufx[7]=(u8)(8);
  264  1        
  265  1        can_sload(17,bufx);
  266  1        can_stx(17);
  267  1        
  268  1        bufx[0]=(u8)(1);
  269  1        bufx[1]=(u8)(2);
  270  1        bufx[2]=(u8)(3);
  271  1        bufx[3]=(u8)(4);
  272  1        bufx[4]=(u8)(5);
  273  1        bufx[5]=(u8)(6);
  274  1        bufx[6]=(u8)(7);
  275  1        bufx[7]=(u8)(8);
  276  1        
  277  1        can_sload(18,bufx);
  278  1        can_stx(18);
  279  1        
  280  1        bufx[0]=(u8)(1);
  281  1        bufx[1]=(u8)(2);
  282  1        bufx[2]=(u8)(3);
  283  1        bufx[3]=(u8)(4);
  284  1        bufx[4]=(u8)(5);
  285  1        bufx[5]=(u8)(6);
  286  1        bufx[6]=(u8)(7);
  287  1        bufx[7]=(u8)(8);
  288  1        
  289  1        can_sload(19,bufx);
  290  1        can_stx(19);
  291  1        ////////////////////////////////////////////////////////////////////////////
  292  1      }
  293         
  294         ////////////////////////////////////////////////////////////////////////////////
  295         //
  296         ////////////////////////////////////////////////////////////////////////////////
  297         void transmit_can_data_1ms(void)
  298         {
  299  1        /*
  300  1        u8 bufx[8];
C166 COMPILER V7.57.0, CTRL                                                                01/03/2020 16:20:11 PAGE 6   

  301  1        
  302  1        ////////////////////////////////////////////////////////////////////////////
  303  1        bufx[0]=(u8)(g_resolver_pos_uw);
  304  1        bufx[1]=(u8)(g_resolver_pos_uw>>8);
  305  1        bufx[2]=(u8)(g_duty_A/10);
  306  1        bufx[3]=(u8)(g_duty_B/10);
  307  1        bufx[4]=(u8)(g_duty_C/10);
  308  1        bufx[5]=(u8)(g_angle_eiq);
  309  1        bufx[6]=(u8)(g_angle_eiq>>8);
  310  1        bufx[7]=0;
  311  1        
  312  1          can_sload(4,bufx);
  313  1          can_stx(4);
  314  1      
  315  1        ////////////////////////////////////////////////////////////////////////////
  316  1        // bufx[0]=(u8)(g_pwm_ex_duty_uw[0]);
  317  1        // bufx[1]=(u8)(g_pwm_ex_duty_uw[0]>>8);
  318  1        // bufx[2]=(u8)(g_pwm_ex_duty_uw[1]);
  319  1        // bufx[3]=(u8)(g_pwm_ex_duty_uw[1]>>8);
  320  1        // bufx[4]=(u8)(g_pwm_ex_duty_uw[2]);
  321  1        // bufx[5]=(u8)(g_pwm_ex_duty_uw[2]>>8);
  322  1        // bufx[6]=(u8)(g_pwm_ex_duty_uw[3]);
  323  1        // bufx[7]=(u8)(g_pwm_ex_duty_uw[3]>>8);
  324  1      
  325  1        bufx[0]=(u8)(Vqs_cmd/100);
  326  1        bufx[1]=(u8)(g_angle_offset/10);
  327  1        bufx[2]=(u8)(V.Alpha/10); // 0.01V/bit
  328  1        bufx[3]=(u8)(V.Beta/10);  // 0.01V/bit
  329  1        bufx[4]=(u8)(V.VecSector);
  330  1        bufx[5]=(u8)(V.T0/10);
  331  1        bufx[6]=(u8)(V.T1/10);
  332  1        bufx[7]=(u8)(V.T2/10);
  333  1      
  334  1          can_sload(5,bufx);
  335  1          can_stx(5);
  336  1      
  337  1        ////////////////////////////////////////////////////////////////////////////
  338  1        bufx[0]=(u8)(get_ad_value(AD_SCDL)>>2);
  339  1        bufx[1]=(u8)(GET_TLE_ERR2());
  340  1        bufx[1]<<=1;
  341  1        bufx[1]|=(GET_TLE_ERR1());
  342  1        bufx[2]=(u8)(get_ad_value(AD_BAT12V_SW)>>2);
  343  1        // bufx[3]=(u8)(get_ad_value(AD_VRO)>>2);
  344  1        // bufx[4]=(u8)(get_ad_value(AD_VO2)>>2);
  345  1        bufx[3]=(u8)(get_ad_value(AD_VO2));
  346  1        bufx[4]=(u8)(get_ad_value(AD_VO2)>>8);
  347  1        bufx[5]=(u8)(get_ad_value(AD_SH1_MON)>>2);
  348  1        bufx[6]=(u8)(get_ad_value(AD_SH2_MON)>>2);
  349  1        bufx[7]=(u8)(get_ad_value(AD_SH3_MON)>>2);
  350  1        
  351  1          can_sload(6,bufx);
  352  1          can_stx(6);
  353  1          */
  354  1        ////////////////////////////////////////////////////////////////////////////
  355  1      }
  356         
C166 COMPILER V7.57.0, CTRL                                                                01/03/2020 16:20:11 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION isr_5ms_hook_user (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 117
0000 F2F40400 R    MOV       R4,g_ctrl_test_timer_uw
0004 06F40CFE      ADD       R4,#0FE0CH
0008 2D16          JMPR      cc_Z,?C0004
000A 06F470FE      ADD       R4,#0FE70H
000E 2D1B          JMPR      cc_Z,?C0005
0010 06F42003      ADD       R4,#0320H
0014 3D1B          JMPR      cc_NZ,?C0001
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 122
0016         ?C0003:
                                           ; SOURCE LINE # 124
0016 E028          MOV       R8,#02H
0018 DA000000 E    CALLS     SEG (set_motor_ctrl_enable),set_motor_ctrl_enable
                                           ; SOURCE LINE # 125
001C F2F80000 R    MOV       R8,TryVqs
0020 DA000000 E    CALLS     SEG (set_motor_volt),set_motor_volt
                                           ; SOURCE LINE # 126
0024 F2F80600 R    MOV       R8,test_dir
0028 DA000000 E    CALLS     SEG (set_motor_dir),set_motor_dir
                                           ; SOURCE LINE # 127
002C F2F80800 R    MOV       R8,motor_offset
0030 DA000000 E    CALLS     SEG (set_motor_offset),set_motor_offset
                                           ; SOURCE LINE # 128
0034 0D0B          JMPR      cc_UC,?C0001
                                           ; SOURCE LINE # 130
0036         ?C0004:
                                           ; SOURCE LINE # 131
0036 E018          MOV       R8,#01H
0038 DA000000 E    CALLS     SEG (set_motor_dir),set_motor_dir
                                           ; SOURCE LINE # 132
003C E6F82602      MOV       R8,#0226H
0040 DA000000 E    CALLS     SEG (set_motor_offset),set_motor_offset
                                           ; SOURCE LINE # 133
0044 0D03          JMPR      cc_UC,?C0001
                                           ; SOURCE LINE # 135
0046         ?C0005:
                                           ; SOURCE LINE # 136
0046 E008          MOV       R8,#00H
0048 DA000000 E    CALLS     SEG (set_motor_ctrl_enable),set_motor_ctrl_enable
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
004C         ?C0001:
                                           ; SOURCE LINE # 141
004C E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 142
004E DB00          RETS      
             ; FUNCTION isr_5ms_hook_user (END    RMASK = @0x7FFF)

             ; FUNCTION isr_10ms_hook_user (BEGIN  RMASK = @0x0010)
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 149
0050 E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 150
0052 DB00          RETS      
             ; FUNCTION isr_10ms_hook_user (END    RMASK = @0x0010)
C166 COMPILER V7.57.0, CTRL                                                                01/03/2020 16:20:11 PAGE 8   


             ; FUNCTION isr_1ms_hook_user (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 160
0054 DA000000 R    CALLS     SEG (transmit_can_data_1ms),transmit_can_data_1ms
                                           ; SOURCE LINE # 162
0058 258F0A00 R    SUBB      tmx,ONES
005C F3F80A00 R    MOVB      RL4,tmx
0060 47F80A00      CMPB      RL4,#0AH
0064 8D04          JMPR      cc_ULT,?C0008
                                           ; SOURCE LINE # 164
0066 F78E0A00 R    MOVB      tmx,ZEROS
                                           ; SOURCE LINE # 165
006A DA000000 R    CALLS     SEG (transmit_can_data_10ms),transmit_can_data_10ms
                                           ; SOURCE LINE # 166
006E         ?C0008:
                                           ; SOURCE LINE # 168
006E E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 169
0070 DB00          RETS      
             ; FUNCTION isr_1ms_hook_user (END    RMASK = @0x7FFF)

             ; FUNCTION can_do_obj (BEGIN  RMASK = @0x4310)
                                           ; SOURCE LINE # 174
;---- Variable 'buf' assigned to Register 'R11/R12' ----
;---- Variable 'cfg' assigned to Register 'R10' ----
;---- Variable 'id' assigned to Register 'R8/R9' ----
                                           ; SOURCE LINE # 179
0072 26F88808      SUB       R8,#0888H
0076 3890          SUBC      R9,#00H
0078 2D02          JMPR      cc_Z,?C0010
                                           ; SOURCE LINE # 180
007A E118          MOVB      RL4,#01H
007C DB00          RETS      
007E         ?C0010:
                                           ; SOURCE LINE # 182
007E DC4C          EXTP      R12,#01H
0080 F48B0100      MOVB      RL4,[R11+#POF(01H)]
0084 C084          MOVBZ     R4,RL4
0086 F6F40000 E    MOV       g_brake_pedal_pos_can_uw,R4
                                           ; SOURCE LINE # 183
008A 5C24          SHL       R4,#02H
008C F6F40000 E    MOV       g_brake_pedal_pos_can_uw,R4
                                           ; SOURCE LINE # 185
0090 E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 186
0092         ?C0011:
0092 DB00          RETS      
             ; FUNCTION can_do_obj (END    RMASK = @0x4310)

             ; FUNCTION transmit_can_data_10ms (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 191
0094 06F0F8FF      ADD       R0,#0FFF8H
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 244
0098 E118          MOVB      RL4,#01H
009A B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 245
009C E128          MOVB      RL4,#02H
009E E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 246
C166 COMPILER V7.57.0, CTRL                                                                01/03/2020 16:20:11 PAGE 9   

00A2 E138          MOVB      RL4,#03H
00A4 E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 247
00A8 E148          MOVB      RL4,#04H
00AA E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 248
00AE E158          MOVB      RL4,#05H
00B0 E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 249
00B4 E168          MOVB      RL4,#06H
00B6 E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 250
00BA E178          MOVB      RL4,#07H
00BC E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 251
00C0 E188          MOVB      RL4,#08H
00C2 E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 253
00C6 F090          MOV       R9,R0
00C8 66F9FF3F      AND       R9,#03FFFH
00CC F2FA04FE      MOV       R10,DPP2
00D0 E6F81000      MOV       R8,#010H
00D4 DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 254
00D8 E6F81000      MOV       R8,#010H
00DC DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 256
00E0 E118          MOVB      RL4,#01H
00E2 B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 257
00E4 E128          MOVB      RL4,#02H
00E6 E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 258
00EA E138          MOVB      RL4,#03H
00EC E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 259
00F0 E148          MOVB      RL4,#04H
00F2 E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 260
00F6 E158          MOVB      RL4,#05H
00F8 E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 261
00FC E168          MOVB      RL4,#06H
00FE E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 262
0102 E178          MOVB      RL4,#07H
0104 E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 263
0108 E188          MOVB      RL4,#08H
010A E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 265
010E F090          MOV       R9,R0
0110 66F9FF3F      AND       R9,#03FFFH
0114 F2FA04FE      MOV       R10,DPP2
0118 E6F81100      MOV       R8,#011H
011C DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 266
0120 E6F81100      MOV       R8,#011H
0124 DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 268
0128 E118          MOVB      RL4,#01H
012A B980          MOVB      [R0],RL4      ; bufx
C166 COMPILER V7.57.0, CTRL                                                                01/03/2020 16:20:11 PAGE 10  

                                           ; SOURCE LINE # 269
012C E128          MOVB      RL4,#02H
012E E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 270
0132 E138          MOVB      RL4,#03H
0134 E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 271
0138 E148          MOVB      RL4,#04H
013A E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 272
013E E158          MOVB      RL4,#05H
0140 E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 273
0144 E168          MOVB      RL4,#06H
0146 E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 274
014A E178          MOVB      RL4,#07H
014C E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 275
0150 E188          MOVB      RL4,#08H
0152 E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 277
0156 F090          MOV       R9,R0
0158 66F9FF3F      AND       R9,#03FFFH
015C F2FA04FE      MOV       R10,DPP2
0160 E6F81200      MOV       R8,#012H
0164 DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 278
0168 E6F81200      MOV       R8,#012H
016C DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 280
0170 E118          MOVB      RL4,#01H
0172 B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 281
0174 E128          MOVB      RL4,#02H
0176 E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 282
017A E138          MOVB      RL4,#03H
017C E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 283
0180 E148          MOVB      RL4,#04H
0182 E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 284
0186 E158          MOVB      RL4,#05H
0188 E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 285
018C E168          MOVB      RL4,#06H
018E E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 286
0192 E178          MOVB      RL4,#07H
0194 E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 287
0198 E188          MOVB      RL4,#08H
019A E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 289
019E F090          MOV       R9,R0
01A0 66F9FF3F      AND       R9,#03FFFH
01A4 F2FA04FE      MOV       R10,DPP2
01A8 E6F81300      MOV       R8,#013H
01AC DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 290
01B0 E6F81300      MOV       R8,#013H
C166 COMPILER V7.57.0, CTRL                                                                01/03/2020 16:20:11 PAGE 11  

01B4 DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 292
01B8 06F00800      ADD       R0,#08H
01BC DB00          RETS      
             ; FUNCTION transmit_can_data_10ms (END    RMASK = @0x7FFF)

             ; FUNCTION transmit_can_data_1ms (BEGIN  RMASK = @0x8000)
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 355
01BE DB00          RETS      
             ; FUNCTION transmit_can_data_1ms (END    RMASK = @0x8000)



MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         448     --------
  NEAR-CONST SIZE  =           2     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          11     --------
  FAR-DATA SIZE    =          88     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          30     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
