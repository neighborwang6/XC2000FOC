C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE CTRL
OBJECT MODULE PLACED IN .\objs\ctrl.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\ctrl.c MODV2 LARGE BROWSE INCDIR(.\src\hardware;.\src;.\EOL_Diag;.
                    -\DTC_Diag;.\Hw_Driver;.\CalTool;.\DTC_Diag\mcu2_prot;./CAN_Driver;.\xcp;.\src\include;.\EBS_Ctrl_Logic) MODV2 DEBUG CODE
                    - PRINT(.\objs\ctrl.lst) TABS(2) OBJECT(.\objs\ctrl.obj) 

 stmt lvl     source

    1         ////////////////////////////////////////////////////////////////////////////////
    2         /**************************************************
    3         *    File Name    : ctrl.c
    4         *    Copyright    : QingChen
    5         *    Module Name  : Electric Power Steering
    6              *
    7         *    CPU          : XC2000
    8         *    RTOS         : No RTOS
    9         *
   10         *    Create Date  : 2019.11.14
   11         *    Author/Cororation: Perfersor YLY
   12         *    Abstract Description:
   13         *
   14         *--------------- Revision History --------------
   15         *    No Version Date      Revisied By  Item    Description
   16         *    1  V0.0    19.11.26  WGY                  eBooster
   17         **************************************************/
   18         
   19         /**************************************************
   20         *    Debug switch Section
   21         **************************************************/
   22         //#define PRESURE_PID_CTRL
   23         /**************************************************
   24         *    Include File Section
   25         **************************************************/
   26         #include "ctrl.h"
   27         #include "ctrl_if.h"
   28         #include "motor_if.h"
   29         #include "motor_pmsm.h"
   30         #include "hw.h"
   31         #include "adc.h"
   32         #include "can_if.h"
   33         
   34         #include "Filters_EbsSensors.h"
   35         #include "ebooster_ctrl.h"
   36         #include "MotorDrive.h"
   37         #include "pid.h"
   38         #include "tle9180d_31qk.h"
   39         
   40         /**************************************************
   41         *    MacroDefine Section
   42         **************************************************/
   43         
   44         /**************************************************
   45         *    StructDefine Section
   46         **************************************************/
   47         
   48         /**************************************************
   49         *    Prototype Declare Section
   50         **************************************************/
   51         enum
   52         {
   53           MOTOR_FORWORD = 0,
C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 2   

   54           MOTOR_BACKWARD = 1,
   55           MOTOR_HOLD = 2
   56         
   57         };
   58         /**************************************************
   59         *    Global Variable Declare Section
   60         **************************************************/
   61         u16 TryVqs=0;
   62         u16 test_dir=0;
   63         u16 motor_offset=630;
   64         const u16 C_VAL_DISP_INITIAL = 1900;
   65         u16 g_mc_pressure;  //The Hydraulic master cylinder's preasure - RT 5ms per scan.
   66         extern u16 g_disp_value_sent; //Relative Displacement - RT (Origional:CC2_CC22(PWM_EX3)) Relstive Displace
             -ment define in ccu2_ccu6.c
   67         
   68         
   69         PID_st g_pid_pres_ctrl;  //PID controller required parameter structure.
   70         ////////////////////////////////////////////////////////////////////////////////
   71         // Variables that sent to CAN
   72         extern u16 g_pres_sense_val;  //The Hydraulic master cylinder's preasure value after filtrate.
   73         extern u32 g_disp_sense_val;  //The Relative Displacement value after filtrate.
   74         
   75         extern float DisplacementSenseMM;
   76         extern u16 Voltagecal,Voltage;
   77         extern u16 PressureAVE;
   78         extern float Eerror;
   79         extern float sum_error;
   80         extern float Derror;
   81         extern float e_error_0;
   82         extern float Eerror_pre;
   83         extern u16 MotorState;  //The direction of the moto rotation.
   84         extern u16 TryValue1,TryValue2,TryValue3,TryValue4;
   85         
   86         /**************************************************
   87         *    File Static Variable Define Section
   88         **************************************************/
   89         
   90         /**************************************************
   91         *    Function Define Section
   92         **************************************************/
   93         
   94         ////////////////////////////////////////////////////////////////////////////////
   95         // 5ms task
   96         ////////////////////////////////////////////////////////////////////////////////
   97         u16 g_ctrl_test_timer_uw=0;
   98         
   99         ////////////////////////////////////////////////////////////////////////////////
  100         //
  101         ////////////////////////////////////////////////////////////////////////////////
  102         u8 isr_5ms_hook_user(void)
  103         {
  104  1        //spi_tle9180d_31qk_trans(0xaaaa);
  105  1        
  106  1        #ifdef PRESURE_PID_CTRL
                // Sensor measurement...
                g_mc_pressure=get_mc_pressure();  //Gei the Mc Preseaure
              
                // Signal filtering...
                filter_pres_sense(g_mc_pressure);
                filter_disp_sense(g_disp_value_sent);
                
                // Control logic...
C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 3   

                //DoEboosterCtrl();
                
                
                // Control output...
                MotorDrive();
                #else
  121  1        switch(g_ctrl_test_timer_uw)
  122  1        {
  123  2        case 0:
  124  2          break;
  125  2      
  126  2        case 100:
  127  2          //motor_offset=630;
  128  2          set_motor_ctrl_enable(2);
  129  2          set_motor_volt(TryVqs); // 1V
  130  2          set_motor_dir(test_dir);//0;
  131  2          set_motor_offset(motor_offset);//630
  132  2          break;
  133  2          
  134  2        case 500:
  135  2          set_motor_dir(1);
  136  2          set_motor_offset(550);//550
  137  2          break;
  138  2          
  139  2        case 900:
  140  2          set_motor_ctrl_enable(0);
  141  2          break;
  142  2        }
  143  1      
  144  1        #endif
  145  1        return 0;
  146  1      }
  147         
  148         ////////////////////////////////////////////////////////////////////////////////
  149         //
  150         ////////////////////////////////////////////////////////////////////////////////
  151         u8 isr_10ms_hook_user(void)
  152         {
  153  1        
  154  1        return 0;
  155  1        
  156  1      }
  157         
  158         ////////////////////////////////////////////////////////////////////////////////
  159         //
  160         ////////////////////////////////////////////////////////////////////////////////
  161         u8 isr_1ms_hook_user(void)
  162         {
  163  1        // Test only: FIXME: yly
  164  1        static u8 tmx=0;
  165  1      
  166  1        transmit_can_data_1ms();
  167  1      
  168  1        if((++tmx)>=10)
  169  1        {
  170  2          tmx=0;
  171  2          transmit_can_data_10ms();
  172  2        }
  173  1      
  174  1        return 0;
  175  1      }
  176         
C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 4   

  177         ////////////////////////////////////////////////////////////////////////////////
  178         //
  179         ////////////////////////////////////////////////////////////////////////////////
  180         u8 can_do_obj(u32 id,u8 cfg,u8 far *buf)
  181         {
  182  1        UNUSED_PARA(cfg);
  183  1        
  184  1        // Test only: Command message from master controller, e.g. VCU, ESC, etc.)
  185  1        if(id!=0x888)
  186  1          return 1;
  187  1      
  188  1        g_brake_pedal_pos_can_uw=buf[1]; // 8-bit
  189  1        g_brake_pedal_pos_can_uw<<=2;    // adjust to 10-bit
  190  1      
  191  1        return 0;
  192  1      }
  193         
  194         ////////////////////////////////////////////////////////////////////////////////
  195         //
  196         ////////////////////////////////////////////////////////////////////////////////
  197         void transmit_can_data_10ms(void)
  198         {
  199  1          u8 bufx[8];
  200  1        
  201  1        ////////////////////////////////////////////////////////////////////////////
  202  1        //bufx[0]=(u8)(get_ad_value(AD_VCC5B_MON)>>2);
  203  1        //bufx[1]=(u8)(get_ad_value(AD_BAT12V_MONY)>>2);
  204  1        //bufx[2]=(u8)(get_ad_value(AD_TEMP_SS1)>>2);
  205  1        //bufx[3]=(u8)(get_ad_value(AD_VCC5_SW_MON)>>2);
  206  1        //bufx[4]=(u8)(get_ad_value(AD_BAT12V_MON)>>2);
  207  1        //bufx[5]=(u8)(get_ad_value(AD_AIN4)>>2);
  208  1        //bufx[6]=(u8)(get_ad_value(AD_AIN3)>>2);
  209  1        //bufx[7]=(u8)(get_ad_value(AD_VO1)>>2);
  210  1      
  211  1        bufx[0]=((u8)(((u16)(DisplacementSenseMM))>>8));
  212  1        bufx[1]=((u8)(((u16)(DisplacementSenseMM))&0xFF));
  213  1        bufx[2]=(u8)(Voltage>>8);
  214  1        bufx[3]=(u8)(Voltage&0xff);
  215  1        bufx[4]=(u8)(PressureAVE>>8);
  216  1        bufx[5]=(u8)(PressureAVE&0xff);
  217  1        bufx[6]=((u8)(((u16)(Eerror))>>8));
  218  1        bufx[7]=((u8)(((u16)(Eerror))&0xFF));
  219  1        
  220  1        can_sload(7,bufx);  //0x105
  221  1        can_stx(7);
  222  1          
  223  1        ////////////////////////////////////////////////////////////////////////////
  224  1        bufx[0]=(u8)(MotorState);
  225  1        bufx[1]=(u8)(1);
  226  1        bufx[2]=(u8)(2);
  227  1        bufx[3]=(u8)(3);
  228  1        bufx[4]=(u8)(4);
  229  1        bufx[5]=(u8)(5);
  230  1        bufx[6]=(u8)(6);
  231  1        bufx[7]=(u8)(7);
  232  1      
  233  1        can_sload(8,bufx);  //0x106
  234  1        can_stx(8);
  235  1        
  236  1        ////////////////////////////////////////////////////////////////////////////
  237  1        bufx[0]=(u8)(g_angle_eiq);
  238  1        bufx[1]=(u8)(g_angle_eiq>>8);
C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 5   

  239  1        bufx[2]=(u8)(g_total_angle_sl);
  240  1        bufx[3]=(u8)(g_total_angle_sl>>8);
  241  1        bufx[4]=(u8)(g_mot_speed_sw);
  242  1        bufx[5]=(u8)(g_mot_speed_sw>>8);
  243  1        //bufx[6]=(u8)(g_dir_ub);
  244  1        //bufx[7]=(u8)(g_resolver_pos_uw/683);
  245  1        
  246  1          //can_sload(9,bufx);
  247  1          //can_stx(9);
  248  1            ////////////////////////////////////////////////////////////////////////////
  249  1        bufx[0]=(u8)(1);
  250  1        bufx[1]=(u8)(2);
  251  1        bufx[2]=(u8)(3);
  252  1        bufx[3]=(u8)(4);
  253  1        bufx[4]=(u8)(5);
  254  1        bufx[5]=(u8)(6);
  255  1        bufx[6]=(u8)(7);
  256  1        bufx[7]=(u8)(8);
  257  1        
  258  1        can_sload(16,bufx);
  259  1        can_stx(16);
  260  1        
  261  1        bufx[0]=(u8)(1);
  262  1        bufx[1]=(u8)(2);
  263  1        bufx[2]=(u8)(3);
  264  1        bufx[3]=(u8)(4);
  265  1        bufx[4]=(u8)(5);
  266  1        bufx[5]=(u8)(6);
  267  1        bufx[6]=(u8)(7);
  268  1        bufx[7]=(u8)(8);
  269  1        
  270  1        can_sload(17,bufx);
  271  1        can_stx(17);
  272  1        
  273  1        bufx[0]=(u8)(1);
  274  1        bufx[1]=(u8)(2);
  275  1        bufx[2]=(u8)(3);
  276  1        bufx[3]=(u8)(4);
  277  1        bufx[4]=(u8)(5);
  278  1        bufx[5]=(u8)(6);
  279  1        bufx[6]=(u8)(7);
  280  1        bufx[7]=(u8)(8);
  281  1        
  282  1        can_sload(18,bufx);
  283  1        can_stx(18);
  284  1        
  285  1        bufx[0]=(u8)(1);
  286  1        bufx[1]=(u8)(2);
  287  1        bufx[2]=(u8)(3);
  288  1        bufx[3]=(u8)(4);
  289  1        bufx[4]=(u8)(5);
  290  1        bufx[5]=(u8)(6);
  291  1        bufx[6]=(u8)(7);
  292  1        bufx[7]=(u8)(8);
  293  1        
  294  1        can_sload(19,bufx);
  295  1        can_stx(19);
  296  1        ////////////////////////////////////////////////////////////////////////////
  297  1      }
  298         
  299         ////////////////////////////////////////////////////////////////////////////////
  300         //
C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 6   

  301         ////////////////////////////////////////////////////////////////////////////////
  302         void transmit_can_data_1ms(void)
  303         {
  304  1        /*
  305  1        u8 bufx[8];
  306  1        
  307  1        ////////////////////////////////////////////////////////////////////////////
  308  1        bufx[0]=(u8)(g_resolver_pos_uw);
  309  1        bufx[1]=(u8)(g_resolver_pos_uw>>8);
  310  1        bufx[2]=(u8)(g_duty_A/10);
  311  1        bufx[3]=(u8)(g_duty_B/10);
  312  1        bufx[4]=(u8)(g_duty_C/10);
  313  1        bufx[5]=(u8)(g_angle_eiq);
  314  1        bufx[6]=(u8)(g_angle_eiq>>8);
  315  1        bufx[7]=0;
  316  1        
  317  1          can_sload(4,bufx);
  318  1          can_stx(4);
  319  1      
  320  1        ////////////////////////////////////////////////////////////////////////////
  321  1        // bufx[0]=(u8)(g_pwm_ex_duty_uw[0]);
  322  1        // bufx[1]=(u8)(g_pwm_ex_duty_uw[0]>>8);
  323  1        // bufx[2]=(u8)(g_pwm_ex_duty_uw[1]);
  324  1        // bufx[3]=(u8)(g_pwm_ex_duty_uw[1]>>8);
  325  1        // bufx[4]=(u8)(g_pwm_ex_duty_uw[2]);
  326  1        // bufx[5]=(u8)(g_pwm_ex_duty_uw[2]>>8);
  327  1        // bufx[6]=(u8)(g_pwm_ex_duty_uw[3]);
  328  1        // bufx[7]=(u8)(g_pwm_ex_duty_uw[3]>>8);
  329  1      
  330  1        bufx[0]=(u8)(Vqs_cmd/100);
  331  1        bufx[1]=(u8)(g_angle_offset/10);
  332  1        bufx[2]=(u8)(V.Alpha/10); // 0.01V/bit
  333  1        bufx[3]=(u8)(V.Beta/10);  // 0.01V/bit
  334  1        bufx[4]=(u8)(V.VecSector);
  335  1        bufx[5]=(u8)(V.T0/10);
  336  1        bufx[6]=(u8)(V.T1/10);
  337  1        bufx[7]=(u8)(V.T2/10);
  338  1      
  339  1          can_sload(5,bufx);
  340  1          can_stx(5);
  341  1      
  342  1        ////////////////////////////////////////////////////////////////////////////
  343  1        bufx[0]=(u8)(get_ad_value(AD_SCDL)>>2);
  344  1        bufx[1]=(u8)(GET_TLE_ERR2());
  345  1        bufx[1]<<=1;
  346  1        bufx[1]|=(GET_TLE_ERR1());
  347  1        bufx[2]=(u8)(get_ad_value(AD_BAT12V_SW)>>2);
  348  1        // bufx[3]=(u8)(get_ad_value(AD_VRO)>>2);
  349  1        // bufx[4]=(u8)(get_ad_value(AD_VO2)>>2);
  350  1        bufx[3]=(u8)(get_ad_value(AD_VO2));
  351  1        bufx[4]=(u8)(get_ad_value(AD_VO2)>>8);
  352  1        bufx[5]=(u8)(get_ad_value(AD_SH1_MON)>>2);
  353  1        bufx[6]=(u8)(get_ad_value(AD_SH2_MON)>>2);
  354  1        bufx[7]=(u8)(get_ad_value(AD_SH3_MON)>>2);
  355  1        
  356  1          can_sload(6,bufx);
  357  1          can_stx(6);
  358  1          */
  359  1        ////////////////////////////////////////////////////////////////////////////
  360  1      }
  361         
C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION isr_5ms_hook_user (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 121
0000 F2F40400 R    MOV       R4,g_ctrl_test_timer_uw
0004 06F40CFE      ADD       R4,#0FE0CH
0008 2D16          JMPR      cc_Z,?C0004
000A 06F470FE      ADD       R4,#0FE70H
000E 2D1B          JMPR      cc_Z,?C0005
0010 06F42003      ADD       R4,#0320H
0014 3D1B          JMPR      cc_NZ,?C0001
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 126
0016         ?C0003:
                                           ; SOURCE LINE # 128
0016 E028          MOV       R8,#02H
0018 DA000000 E    CALLS     SEG (set_motor_ctrl_enable),set_motor_ctrl_enable
                                           ; SOURCE LINE # 129
001C F2F80000 R    MOV       R8,TryVqs
0020 DA000000 E    CALLS     SEG (set_motor_volt),set_motor_volt
                                           ; SOURCE LINE # 130
0024 F2F80600 R    MOV       R8,test_dir
0028 DA000000 E    CALLS     SEG (set_motor_dir),set_motor_dir
                                           ; SOURCE LINE # 131
002C F2F80800 R    MOV       R8,motor_offset
0030 DA000000 E    CALLS     SEG (set_motor_offset),set_motor_offset
                                           ; SOURCE LINE # 132
0034 0D0B          JMPR      cc_UC,?C0001
                                           ; SOURCE LINE # 134
0036         ?C0004:
                                           ; SOURCE LINE # 135
0036 E018          MOV       R8,#01H
0038 DA000000 E    CALLS     SEG (set_motor_dir),set_motor_dir
                                           ; SOURCE LINE # 136
003C E6F82602      MOV       R8,#0226H
0040 DA000000 E    CALLS     SEG (set_motor_offset),set_motor_offset
                                           ; SOURCE LINE # 137
0044 0D03          JMPR      cc_UC,?C0001
                                           ; SOURCE LINE # 139
0046         ?C0005:
                                           ; SOURCE LINE # 140
0046 E008          MOV       R8,#00H
0048 DA000000 E    CALLS     SEG (set_motor_ctrl_enable),set_motor_ctrl_enable
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
004C         ?C0001:
                                           ; SOURCE LINE # 145
004C E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 146
004E DB00          RETS      
             ; FUNCTION isr_5ms_hook_user (END    RMASK = @0x7FFF)

             ; FUNCTION isr_10ms_hook_user (BEGIN  RMASK = @0x0010)
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 154
0050 E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 156
0052 DB00          RETS      
             ; FUNCTION isr_10ms_hook_user (END    RMASK = @0x0010)
C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 8   


             ; FUNCTION isr_1ms_hook_user (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 166
0054 DA000000 R    CALLS     SEG (transmit_can_data_1ms),transmit_can_data_1ms
                                           ; SOURCE LINE # 168
0058 258F0A00 R    SUBB      tmx,ONES
005C F3F80A00 R    MOVB      RL4,tmx
0060 47F80A00      CMPB      RL4,#0AH
0064 8D04          JMPR      cc_ULT,?C0008
                                           ; SOURCE LINE # 170
0066 F78E0A00 R    MOVB      tmx,ZEROS
                                           ; SOURCE LINE # 171
006A DA000000 R    CALLS     SEG (transmit_can_data_10ms),transmit_can_data_10ms
                                           ; SOURCE LINE # 172
006E         ?C0008:
                                           ; SOURCE LINE # 174
006E E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 175
0070 DB00          RETS      
             ; FUNCTION isr_1ms_hook_user (END    RMASK = @0x7FFF)

             ; FUNCTION can_do_obj (BEGIN  RMASK = @0x4310)
                                           ; SOURCE LINE # 180
;---- Variable 'buf' assigned to Register 'R11/R12' ----
;---- Variable 'cfg' assigned to Register 'R10' ----
;---- Variable 'id' assigned to Register 'R8/R9' ----
                                           ; SOURCE LINE # 185
0072 26F88808      SUB       R8,#0888H
0076 3890          SUBC      R9,#00H
0078 2D02          JMPR      cc_Z,?C0010
                                           ; SOURCE LINE # 186
007A E118          MOVB      RL4,#01H
007C DB00          RETS      
007E         ?C0010:
                                           ; SOURCE LINE # 188
007E DC4C          EXTP      R12,#01H
0080 F48B0100      MOVB      RL4,[R11+#POF(01H)]
0084 C084          MOVBZ     R4,RL4
0086 F6F40000 E    MOV       g_brake_pedal_pos_can_uw,R4
                                           ; SOURCE LINE # 189
008A 5C24          SHL       R4,#02H
008C F6F40000 E    MOV       g_brake_pedal_pos_can_uw,R4
                                           ; SOURCE LINE # 191
0090 E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 192
0092         ?C0011:
0092 DB00          RETS      
             ; FUNCTION can_do_obj (END    RMASK = @0x4310)

             ; FUNCTION transmit_can_data_10ms (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 197
0094 06F0F8FF      ADD       R0,#0FFF8H
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 211
0098 F2F40000 E    MOV       R4,DisplacementSenseMM
009C F2F50200 E    MOV       R5,DisplacementSenseMM+02H
00A0 DA000000 E    CALLS     SEG (?C_CASTF),?C_CASTF
00A4 F054          MOV       R5,R4
00A6 7C84          SHR       R4,#08H
00A8 B980          MOVB      [R0],RL4      ; bufx
C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 9   

                                           ; SOURCE LINE # 212
00AA 66F5FF00      AND       R5,#0FFH
00AE F18A          MOVB      RL4,RL5
00B0 E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 213
00B4 F2F50000 E    MOV       R5,Voltage
00B8 F045          MOV       R4,R5
00BA 7C84          SHR       R4,#08H
00BC E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 214
00C0 66F5FF00      AND       R5,#0FFH
00C4 F18A          MOVB      RL4,RL5
00C6 E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 215
00CA F2F50000 E    MOV       R5,PressureAVE
00CE F045          MOV       R4,R5
00D0 7C84          SHR       R4,#08H
00D2 E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 216
00D6 66F5FF00      AND       R5,#0FFH
00DA F18A          MOVB      RL4,RL5
00DC E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 217
00E0 F2F40000 E    MOV       R4,Eerror
00E4 F2F50200 E    MOV       R5,Eerror+02H
00E8 DA000000 E    CALLS     SEG (?C_CASTF),?C_CASTF
00EC F054          MOV       R5,R4
00EE 7C84          SHR       R4,#08H
00F0 E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 218
00F4 66F5FF00      AND       R5,#0FFH
00F8 F18A          MOVB      RL4,RL5
00FA E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 220
00FE F090          MOV       R9,R0
0100 66F9FF3F      AND       R9,#03FFFH
0104 F2FA04FE      MOV       R10,DPP2
0108 E078          MOV       R8,#07H
010A DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 221
010E E078          MOV       R8,#07H
0110 DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 224
0114 F3F80000 E    MOVB      RL4,MotorState
0118 B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 225
011A E118          MOVB      RL4,#01H
011C E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 226
0120 E128          MOVB      RL4,#02H
0122 E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 227
0126 E138          MOVB      RL4,#03H
0128 E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 228
012C E148          MOVB      RL4,#04H
012E E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 229
0132 E158          MOVB      RL4,#05H
0134 E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 230
0138 E168          MOVB      RL4,#06H
C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 10  

013A E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 231
013E E178          MOVB      RL4,#07H
0140 E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 233
0144 F090          MOV       R9,R0
0146 66F9FF3F      AND       R9,#03FFFH
014A F2FA04FE      MOV       R10,DPP2
014E E088          MOV       R8,#08H
0150 DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 234
0154 E088          MOV       R8,#08H
0156 DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 237
015A F3F80000 E    MOVB      RL4,g_angle_eiq
015E B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 238
0160 F2F40000 E    MOV       R4,g_angle_eiq
0164 7C84          SHR       R4,#08H
0166 E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 239
016A F3F80000 E    MOVB      RL4,g_total_angle_sl
016E E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 240
0172 F2F40000 E    MOV       R4,g_total_angle_sl
0176 F2F50200 E    MOV       R5,g_total_angle_sl+02H
017A F065          MOV       R6,R5
017C 7C84          SHR       R4,#08H
017E BC85          ASHR      R5,#08H
0180 5C86          SHL       R6,#08H
0182 7046          OR        R4,R6
0184 E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 241
0188 F3F80000 E    MOVB      RL4,g_mot_speed_sw
018C E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 242
0190 F2F40000 E    MOV       R4,g_mot_speed_sw
0194 BC84          ASHR      R4,#08H
0196 E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 249
019A E118          MOVB      RL4,#01H
019C B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 250
019E E128          MOVB      RL4,#02H
01A0 E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 251
01A4 E138          MOVB      RL4,#03H
01A6 E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 252
01AA E148          MOVB      RL4,#04H
01AC E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 253
01B0 E158          MOVB      RL4,#05H
01B2 E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 254
01B6 E168          MOVB      RL4,#06H
01B8 E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 255
01BC E178          MOVB      RL4,#07H
01BE E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 256
01C2 E188          MOVB      RL4,#08H
C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 11  

01C4 E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 258
01C8 F090          MOV       R9,R0
01CA 66F9FF3F      AND       R9,#03FFFH
01CE F2FA04FE      MOV       R10,DPP2
01D2 E6F81000      MOV       R8,#010H
01D6 DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 259
01DA E6F81000      MOV       R8,#010H
01DE DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 261
01E2 E118          MOVB      RL4,#01H
01E4 B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 262
01E6 E128          MOVB      RL4,#02H
01E8 E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 263
01EC E138          MOVB      RL4,#03H
01EE E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 264
01F2 E148          MOVB      RL4,#04H
01F4 E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 265
01F8 E158          MOVB      RL4,#05H
01FA E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 266
01FE E168          MOVB      RL4,#06H
0200 E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 267
0204 E178          MOVB      RL4,#07H
0206 E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 268
020A E188          MOVB      RL4,#08H
020C E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 270
0210 F090          MOV       R9,R0
0212 66F9FF3F      AND       R9,#03FFFH
0216 F2FA04FE      MOV       R10,DPP2
021A E6F81100      MOV       R8,#011H
021E DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 271
0222 E6F81100      MOV       R8,#011H
0226 DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 273
022A E118          MOVB      RL4,#01H
022C B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 274
022E E128          MOVB      RL4,#02H
0230 E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 275
0234 E138          MOVB      RL4,#03H
0236 E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 276
023A E148          MOVB      RL4,#04H
023C E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 277
0240 E158          MOVB      RL4,#05H
0242 E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 278
0246 E168          MOVB      RL4,#06H
0248 E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 279
C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 12  

024C E178          MOVB      RL4,#07H
024E E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 280
0252 E188          MOVB      RL4,#08H
0254 E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 282
0258 F090          MOV       R9,R0
025A 66F9FF3F      AND       R9,#03FFFH
025E F2FA04FE      MOV       R10,DPP2
0262 E6F81200      MOV       R8,#012H
0266 DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 283
026A E6F81200      MOV       R8,#012H
026E DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 285
0272 E118          MOVB      RL4,#01H
0274 B980          MOVB      [R0],RL4      ; bufx
                                           ; SOURCE LINE # 286
0276 E128          MOVB      RL4,#02H
0278 E4800100      MOVB      [R0+#01H],RL4 ; bufx+1
                                           ; SOURCE LINE # 287
027C E138          MOVB      RL4,#03H
027E E4800200      MOVB      [R0+#02H],RL4 ; bufx+2
                                           ; SOURCE LINE # 288
0282 E148          MOVB      RL4,#04H
0284 E4800300      MOVB      [R0+#03H],RL4 ; bufx+3
                                           ; SOURCE LINE # 289
0288 E158          MOVB      RL4,#05H
028A E4800400      MOVB      [R0+#04H],RL4 ; bufx+4
                                           ; SOURCE LINE # 290
028E E168          MOVB      RL4,#06H
0290 E4800500      MOVB      [R0+#05H],RL4 ; bufx+5
                                           ; SOURCE LINE # 291
0294 E178          MOVB      RL4,#07H
0296 E4800600      MOVB      [R0+#06H],RL4 ; bufx+6
                                           ; SOURCE LINE # 292
029A E188          MOVB      RL4,#08H
029C E4800700      MOVB      [R0+#07H],RL4 ; bufx+7
                                           ; SOURCE LINE # 294
02A0 F090          MOV       R9,R0
02A2 66F9FF3F      AND       R9,#03FFFH
02A6 F2FA04FE      MOV       R10,DPP2
02AA E6F81300      MOV       R8,#013H
02AE DA000000 E    CALLS     SEG (can_sload),can_sload
                                           ; SOURCE LINE # 295
02B2 E6F81300      MOV       R8,#013H
02B6 DA000000 E    CALLS     SEG (can_stx),can_stx
                                           ; SOURCE LINE # 297
02BA 06F00800      ADD       R0,#08H
02BE DB00          RETS      
             ; FUNCTION transmit_can_data_10ms (END    RMASK = @0x7FFF)

             ; FUNCTION transmit_can_data_1ms (BEGIN  RMASK = @0x8000)
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 360
02C0 DB00          RETS      
             ; FUNCTION transmit_can_data_1ms (END    RMASK = @0x8000)



MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         706     --------
C166 COMPILER V7.57.0, CTRL                                                                12/25/2020 22:12:54 PAGE 13  

  NEAR-CONST SIZE  =           2     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          11     --------
  FAR-DATA SIZE    =          88     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          30     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
