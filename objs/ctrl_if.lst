C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE CTRL_IF
OBJECT MODULE PLACED IN .\objs\ctrl_if.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE src\ctrl_if.c MODV2 LARGE BROWSE INCDIR(.\src\hardware;.\src;.\EOL_Dia
                    -g;.\DTC_Diag;.\Hw_Driver;.\CalTool;.\DTC_Diag\mcu2_prot;./CAN_Driver;.\xcp;.\src\include;.\EBS_Ctrl_Logic) MODV2 DEBUG C
                    -ODE PRINT(.\objs\ctrl_if.lst) TABS(2) OBJECT(.\objs\ctrl_if.obj) 

 stmt lvl     source

    1         ////////////////////////////////////////////////////////////////////////////////
    2         /*******************************************************************************
    3         * 
    4         *
    5         *  
    6         *      
    7         *******************************************************************************/
    8         ////////////////////////////////////////////////////////////////////////////////
    9         
   10         #include "ctrl_if.h"
   11         #include "board.h"
   12         #include "motor_if.h"
   13         #include "svpwm.h"
   14         
   15         #define GET_BRK_PEDAL_STATE() (P2_IN_P10)
   16         
   17         #define TLE9180D_31QK
   18         //#define TLE7189F
   19         
   20         ////////////////////////////////////////////////////////////////////////////////
   21         // Brake command from CAN bus
   22         u16 g_brake_pedal_pos_can_uw=0;
   23         
   24         ////////////////////////////////////////////////////////////////////////////////
   25         //
   26         ////////////////////////////////////////////////////////////////////////////////
   27         u16 get_brake_pedal_pos0(void)
   28         {
   29  1        return get_ad_value(AD_BRK0);
   30  1      }
   31         
   32         ////////////////////////////////////////////////////////////////////////////////
   33         //
   34         ////////////////////////////////////////////////////////////////////////////////
   35         u16 get_brake_pedal_pos1(void)
   36         {
   37  1        return get_ad_value(AD_BRK0);
   38  1      }
   39         
   40         ////////////////////////////////////////////////////////////////////////////////
   41         //
   42         ////////////////////////////////////////////////////////////////////////////////
   43         u16 get_brake_pedal_pos_can(void)
   44         {
   45  1        return g_brake_pedal_pos_can_uw;
   46  1      }
   47         
   48         ////////////////////////////////////////////////////////////////////////////////
   49         //
   50         ////////////////////////////////////////////////////////////////////////////////
   51         u16 get_mc_pressure0(void)
   52         {
   53  1        return get_ad_value(AD_PRS0);
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 2   

   54  1      }
   55         
   56         ////////////////////////////////////////////////////////////////////////////////
   57         //
   58         ////////////////////////////////////////////////////////////////////////////////
   59         u16 get_mc_pressure1(void)
   60         {
   61  1        return get_ad_value(AD_PRS0);
   62  1      }
   63         
   64         ////////////////////////////////////////////////////////////////////////////////
   65         //
   66         ////////////////////////////////////////////////////////////////////////////////
   67         s16 get_steer_torque0(void)
   68         {
   69  1        return 0;
   70  1      }
   71         
   72         ////////////////////////////////////////////////////////////////////////////////
   73         //
   74         ////////////////////////////////////////////////////////////////////////////////
   75         s16 get_steer_torque1(void)
   76         {
   77  1        return 0;
   78  1      }
   79         
   80         ////////////////////////////////////////////////////////////////////////////////
   81         //
   82         ////////////////////////////////////////////////////////////////////////////////
   83         u16 get_motor_angle_m(void)
   84         {
   85  1        return g_angle_sensor;
   86  1      }
   87         
   88         ////////////////////////////////////////////////////////////////////////////////
   89         //
   90         ////////////////////////////////////////////////////////////////////////////////
   91         u16 get_motor_angle_e(void)
   92         {
   93  1        return g_angle_eiq;
   94  1      }
   95         
   96         ////////////////////////////////////////////////////////////////////////////////
   97         //
   98         ////////////////////////////////////////////////////////////////////////////////
   99         s32 get_motor_total_angle(void)
  100         {
  101  1        return ((g_total_angle_sl*90)>>12);
  102  1      }
  103         
  104         ////////////////////////////////////////////////////////////////////////////////
  105         //
  106         ////////////////////////////////////////////////////////////////////////////////
  107         s16 get_motor_speed(void)
  108         {
  109  1        return g_mot_speed_sw;
  110  1      }
  111         
  112         ////////////////////////////////////////////////////////////////////////////////
  113         //
  114         ////////////////////////////////////////////////////////////////////////////////
  115         u8 set_motor_speed(s16 speed) // reserved
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 3   

  116         {
  117  1        UNUSED_PARA(speed);
  118  1      
  119  1        return 1;
  120  1      }
  121         
  122         ////////////////////////////////////////////////////////////////////////////////
  123         //
  124         ////////////////////////////////////////////////////////////////////////////////
  125         u8 set_motor_torque(s16 torq) // reserved
  126         {
  127  1        UNUSED_PARA(torq);
  128  1      
  129  1        return 1;
  130  1      }
  131         
  132         ////////////////////////////////////////////////////////////////////////////////
  133         // volt: 0~12V: => 0~120 (0.1V/bit)
  134         ////////////////////////////////////////////////////////////////////////////////
  135         u8 set_motor_volt(u16 volt)
  136         {
  137  1        g_duty_uw=(u16)((10000UL*volt)/Udc);
  138  1      
  139  1        return 0;
  140  1      }
  141         
  142         ////////////////////////////////////////////////////////////////////////////////
  143         //
  144         ////////////////////////////////////////////////////////////////////////////////
  145         u8 set_motor_dir(u8 dir)
  146         {
  147  1        if(dir>1)
  148  1          return 1;
  149  1      
  150  1        g_dir_ub=dir;
  151  1      
  152  1        return 0;
  153  1      }
  154         
  155         ////////////////////////////////////////////////////////////////////////////////
  156         // 0: disable, 1: enable level1, 2: enable_level2
  157         ////////////////////////////////////////////////////////////////////////////////
  158         u8 set_motor_ctrl_enable(u8 enable)
  159         {
  160  1        if(enable==1)
  161  1        {
  162  2          SET_TLE_ENA(1);
  163  2          SET_EN_UVW(1);
  164  2          set_phase_on(0,0);
  165  2          set_phase_on(1,0);
  166  2          set_phase_on(2,0);
  167  2      
  168  2          g_time_inh=(u16)0xFFFF;
  169  2        }
  170  1        else if(enable==2)
  171  1        {
  172  2          SET_TLE_ENA(1);
  173  2          SET_EN_UVW(1);
  174  2          set_phase_on(0,1);
  175  2          set_phase_on(1,1);
  176  2          set_phase_on(2,1);
  177  2      
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 4   

  178  2          g_time_inh=0;
  179  2        }
  180  1        else if(enable==0)
  181  1        {
  182  2          SET_TLE_ENA(0);
  183  2          SET_EN_UVW(0);
  184  2      
  185  2          set_phase_on(0,0);
  186  2          set_phase_on(1,0);
  187  2          set_phase_on(2,0);
  188  2          pwm_setduty(0,0);
  189  2          pwm_setduty(1,0);
  190  2          pwm_setduty(2,0);
  191  2      
  192  2          g_time_inh=(u16)0xFFFF;
  193  2        }
  194  1      
  195  1        return 0;
  196  1      }
  197         
  198         ////////////////////////////////////////////////////////////////////////////////
  199         //
  200         ////////////////////////////////////////////////////////////////////////////////
  201         u8 save_parameters(u8 *para_buf, u8 len)
  202         {
  203  1        UNUSED_PARA(para_buf);
  204  1        UNUSED_PARA(len);
  205  1      
  206  1        return 1;
  207  1      }
  208         
  209         ////////////////////////////////////////////////////////////////////////////////
  210         //
  211         ////////////////////////////////////////////////////////////////////////////////
  212         u8 read_parameters(u8 *para_buf, u8 len)
  213         {
  214  1        UNUSED_PARA(para_buf);
  215  1        UNUSED_PARA(len);
  216  1      
  217  1        return 1;
  218  1      }
  219         
  220         ////////////////////////////////////////////////////////////////////////////////
  221         // 0.1degree/bit
  222         ////////////////////////////////////////////////////////////////////////////////
  223         u8 set_motor_offset(s16 offset)
  224         {
  225  1        if(g_motor_type_ub==MOTOR_TYPE_BLDC)
  226  1          g_pos_offset_bldc_uw=(u16)offset;
  227  1        else if(g_motor_type_ub==MOTOR_TYPE_PMSM)
  228  1          g_pos_offset_pmsm_uw=(u16)offset;
  229  1      
  230  1        return 0;
  231  1      }
  232         
  233         ////////////////////////////////////////////////////////////////////////////////
  234         //
  235         ////////////////////////////////////////////////////////////////////////////////
  236         u16 get_bat_volt(void)
  237         {
  238  1        u16 l_tmpu16;
  239  1      
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 5   

  240  1        l_tmpu16=get_ad_value(AD_BAT12V_MON);
  241  1        // Resistor divider : 1M/330K
  242  1        // 1023 => 5V, Output adjusted to 0.1V/bit
  243  1        l_tmpu16=(l_tmpu16*25)>>7; //l_tmpu16*4*5*10/1024;
  244  1      
  245  1        return l_tmpu16;
  246  1      }
  247         
  248         ////////////////////////////////////////////////////////////////////////////////
  249         //
  250         ////////////////////////////////////////////////////////////////////////////////
  251         u16 get_mc_pressure(void)
  252         {
  253  1        u16 l_tmpu16;
  254  1      
  255  1        // VRO remap to MC pressure input.
  256  1        l_tmpu16=get_ad_value(AD_AIN3);
  257  1      
  258  1        return l_tmpu16;
  259  1      }
  260         
  261         ////////////////////////////////////////////////////////////////////////////////
  262         //
  263         ////////////////////////////////////////////////////////////////////////////////
  264         u16 get_disp_sensor0(void)
  265         {
  266  1        u16 l_tmpu16;
  267  1      
  268  1        l_tmpu16=get_ad_value(AD_BRK0);
  269  1      
  270  1        return l_tmpu16;
  271  1      }
  272         
  273         ////////////////////////////////////////////////////////////////////////////////
  274         //
  275         ////////////////////////////////////////////////////////////////////////////////
  276         u16 get_ign_volt(void)
  277         {
  278  1        // IGN: digital input in DIAS EPS ECU
  279  1        if(GET_IGN())
  280  1          return get_bat_volt();
  281  1      else
  282  1        return 0;
  283  1      }
  284         
  285         ////////////////////////////////////////////////////////////////////////////////
  286         // Brake pedal light switch 1:Press the pedal ; 0:Do not press the pedal.
  287         ////////////////////////////////////////////////////////////////////////////////
  288         u16 get_brk_pedal_state(void)
  289         {
  290  1        if(GET_BRK_PEDAL_STATE())
  291  1        {
  292  2          return 1;
  293  2        }
  294  1        else
  295  1        {
  296  2          return 0;
  297  2          
  298  2        }
  299  1      }
  300         
  301         ////////////////////////////////////////////////////////////////////////////////
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 6   

  302         // No brake pedal switch available to eBooster
  303         ////////////////////////////////////////////////////////////////////////////////
  304         u16 get_brk_pedal_volt(void)
  305         {
  306  1        return (u16)get_ad_value(AD_VO2);
  307  1      }
  308         
  309         ////////////////////////////////////////////////////////////////////////////////
  310         //
  311         ////////////////////////////////////////////////////////////////////////////////
  312         u16 get_current(u8 i_idx)
  313         {
  314  1        u16 l_tmpu16=0;
  315  1      
  316  1        switch(i_idx)
  317  1        {
  318  2        case 0:
  319  2          l_tmpu16=get_ad_value(AD_VO1);
  320  2          break;
  321  2      
  322  2        case 1:
  323  2        case 2:
  324  2        case 3:
  325  2          l_tmpu16=(u16)0xFFFF;
  326  2          break;
  327  2        }
  328  1      
  329  1        return l_tmpu16;
  330  1      }
  331         
  332         ////////////////////////////////////////////////////////////////////////////////
  333         //
  334         ////////////////////////////////////////////////////////////////////////////////
  335         u16 get_temp_sensor_pcb(void)
  336         {
  337  1        return get_ad_value(AD_TEMP_SS1);
  338  1      }
  339         
  340         ////////////////////////////////////////////////////////////////////////////////
  341         // Not mount: unavailable
  342         ////////////////////////////////////////////////////////////////////////////////
  343         u16 get_temp_sensor_mosfet(void)
  344         {
  345  1        return (u16)0xFFFF;
  346  1      }
  347         
  348         ////////////////////////////////////////////////////////////////////////////////
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION get_brake_pedal_pos0 (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 27
                                           ; SOURCE LINE # 29
0000 E048          MOV       R8,#04H
0002 DA000000 E    CALLS     SEG (get_ad_value),get_ad_value
                                           ; SOURCE LINE # 30
0006 DB00          RETS      
             ; FUNCTION get_brake_pedal_pos0 (END    RMASK = @0x7FFF)

             ; FUNCTION get_brake_pedal_pos1 (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 37
0008 E048          MOV       R8,#04H
000A DA000000 E    CALLS     SEG (get_ad_value),get_ad_value
                                           ; SOURCE LINE # 38
000E DB00          RETS      
             ; FUNCTION get_brake_pedal_pos1 (END    RMASK = @0x7FFF)

             ; FUNCTION get_brake_pedal_pos_can (BEGIN  RMASK = @0x0010)
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 45
0010 F2F40000 R    MOV       R4,g_brake_pedal_pos_can_uw
                                           ; SOURCE LINE # 46
0014 DB00          RETS      
             ; FUNCTION get_brake_pedal_pos_can (END    RMASK = @0x0010)

             ; FUNCTION get_mc_pressure0 (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 53
0016 E038          MOV       R8,#03H
0018 DA000000 E    CALLS     SEG (get_ad_value),get_ad_value
                                           ; SOURCE LINE # 54
001C DB00          RETS      
             ; FUNCTION get_mc_pressure0 (END    RMASK = @0x7FFF)

             ; FUNCTION get_mc_pressure1 (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 61
001E E038          MOV       R8,#03H
0020 DA000000 E    CALLS     SEG (get_ad_value),get_ad_value
                                           ; SOURCE LINE # 62
0024 DB00          RETS      
             ; FUNCTION get_mc_pressure1 (END    RMASK = @0x7FFF)

             ; FUNCTION get_steer_torque0 (BEGIN  RMASK = @0x0010)
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 69
0026 E004          MOV       R4,#00H
                                           ; SOURCE LINE # 70
0028 DB00          RETS      
             ; FUNCTION get_steer_torque0 (END    RMASK = @0x0010)

             ; FUNCTION get_steer_torque1 (BEGIN  RMASK = @0x0010)
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 77
002A E004          MOV       R4,#00H
                                           ; SOURCE LINE # 78
002C DB00          RETS      
             ; FUNCTION get_steer_torque1 (END    RMASK = @0x0010)
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 8   


             ; FUNCTION get_motor_angle_m (BEGIN  RMASK = @0x0010)
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 85
002E F2F40000 E    MOV       R4,g_angle_sensor
                                           ; SOURCE LINE # 86
0032 DB00          RETS      
             ; FUNCTION get_motor_angle_m (END    RMASK = @0x0010)

             ; FUNCTION get_motor_angle_e (BEGIN  RMASK = @0x0010)
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 93
0034 F2F40000 E    MOV       R4,g_angle_eiq
                                           ; SOURCE LINE # 94
0038 DB00          RETS      
             ; FUNCTION get_motor_angle_e (END    RMASK = @0x0010)

             ; FUNCTION get_motor_total_angle (BEGIN  RMASK = @0x60F0)
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 101
003A E6F65A00      MOV       R6,#05AH
003E E007          MOV       R7,#00H
0040 F2F40000 E    MOV       R4,g_total_angle_sl
0044 F2F50200 E    MOV       R5,g_total_angle_sl+02H
0048 DA000000 E    CALLS     SEG (?C_LMUL),?C_LMUL
004C F065          MOV       R6,R5
004E 7CC4          SHR       R4,#0CH
0050 BCC5          ASHR      R5,#0CH
0052 5C46          SHL       R6,#04H
0054 7046          OR        R4,R6
                                           ; SOURCE LINE # 102
0056 DB00          RETS      
             ; FUNCTION get_motor_total_angle (END    RMASK = @0x60F0)

             ; FUNCTION get_motor_speed (BEGIN  RMASK = @0x0010)
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 109
0058 F2F40000 E    MOV       R4,g_mot_speed_sw
                                           ; SOURCE LINE # 110
005C DB00          RETS      
             ; FUNCTION get_motor_speed (END    RMASK = @0x0010)

             ; FUNCTION set_motor_speed (BEGIN  RMASK = @0x4010)
                                           ; SOURCE LINE # 115
;---- Variable 'speed' assigned to Register 'R8' ----
                                           ; SOURCE LINE # 119
005E E118          MOVB      RL4,#01H
                                           ; SOURCE LINE # 120
0060 DB00          RETS      
             ; FUNCTION set_motor_speed (END    RMASK = @0x4010)

             ; FUNCTION set_motor_torque (BEGIN  RMASK = @0x4010)
                                           ; SOURCE LINE # 125
;---- Variable 'torq' assigned to Register 'R8' ----
                                           ; SOURCE LINE # 129
0062 E118          MOVB      RL4,#01H
                                           ; SOURCE LINE # 130
0064 DB00          RETS      
             ; FUNCTION set_motor_torque (END    RMASK = @0x4010)

             ; FUNCTION set_motor_volt (BEGIN  RMASK = @0x6050)
                                           ; SOURCE LINE # 135
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 9   

;---- Variable 'volt' assigned to Register 'R8' ----
                                           ; SOURCE LINE # 137
0066 E6F41027      MOV       R4,#02710H
006A 1B84          MULU      R8,R4
006C E6F6E02E      MOV       R6,#02EE0H
0070 7B66          DIVLU     R6
0072 F6070000 E    MOV       g_duty_uw,MDL
                                           ; SOURCE LINE # 139
0076 E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 140
0078 DB00          RETS      
             ; FUNCTION set_motor_volt (END    RMASK = @0x6050)

             ; FUNCTION set_motor_dir (BEGIN  RMASK = @0x4010)
                                           ; SOURCE LINE # 145
;---- Variable 'dir' assigned to Register 'R8' ----
                                           ; SOURCE LINE # 147
007A F048          MOV       R4,R8
007C 4981          CMPB      RL4,#01H
007E FD02          JMPR      cc_ULE,?C0015
                                           ; SOURCE LINE # 148
0080 E118          MOVB      RL4,#01H
0082 DB00          RETS      
0084         ?C0015:
                                           ; SOURCE LINE # 150
0084 F048          MOV       R4,R8
0086 F7F80000 E    MOVB      g_dir_ub,RL4
                                           ; SOURCE LINE # 152
008A E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 153
008C         ?C0016:
008C DB00          RETS      
             ; FUNCTION set_motor_dir (END    RMASK = @0x4010)

             ; FUNCTION set_motor_ctrl_enable (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 158
008E ECFD          PUSH      R13
0090 F0D8          MOV       R13,R8
;---- Variable 'enable' assigned to Register 'R13' ----
                                           ; SOURCE LINE # 160
0092 F048          MOV       R4,R8
0094 4981          CMPB      RL4,#01H
0096 3D11          JMPR      cc_NZ,?C0017
                                           ; SOURCE LINE # 162
0098 7FD1          BSET      P0_OUT_P7
                                           ; SOURCE LINE # 163
009A 7FDB          BSET      P10_OUT_P7
                                           ; SOURCE LINE # 164
009C E009          MOV       R9,#00H
009E E008          MOV       R8,#00H
00A0 DA000000 E    CALLS     SEG (set_phase_on),set_phase_on
                                           ; SOURCE LINE # 165
00A4 E009          MOV       R9,#00H
00A6 E018          MOV       R8,#01H
00A8 DA000000 E    CALLS     SEG (set_phase_on),set_phase_on
                                           ; SOURCE LINE # 166
00AC E009          MOV       R9,#00H
00AE E028          MOV       R8,#02H
00B0 DA000000 E    CALLS     SEG (set_phase_on),set_phase_on
                                           ; SOURCE LINE # 168
00B4 F68F0000 E    MOV       g_time_inh,ONES
                                           ; SOURCE LINE # 169
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 10  

00B8 0D33          JMPR      cc_UC,?C0018
00BA         ?C0017:
                                           ; SOURCE LINE # 170
00BA F04D          MOV       R4,R13
00BC 4982          CMPB      RL4,#02H
00BE 3D11          JMPR      cc_NZ,?C0019
                                           ; SOURCE LINE # 172
00C0 7FD1          BSET      P0_OUT_P7
                                           ; SOURCE LINE # 173
00C2 7FDB          BSET      P10_OUT_P7
                                           ; SOURCE LINE # 174
00C4 E019          MOV       R9,#01H
00C6 E008          MOV       R8,#00H
00C8 DA000000 E    CALLS     SEG (set_phase_on),set_phase_on
                                           ; SOURCE LINE # 175
00CC E019          MOV       R9,#01H
00CE E018          MOV       R8,#01H
00D0 DA000000 E    CALLS     SEG (set_phase_on),set_phase_on
                                           ; SOURCE LINE # 176
00D4 E019          MOV       R9,#01H
00D6 E028          MOV       R8,#02H
00D8 DA000000 E    CALLS     SEG (set_phase_on),set_phase_on
                                           ; SOURCE LINE # 178
00DC F68E0000 E    MOV       g_time_inh,ZEROS
                                           ; SOURCE LINE # 179
00E0 0D1F          JMPR      cc_UC,?C0018
00E2         ?C0019:
                                           ; SOURCE LINE # 180
00E2 F04D          MOV       R4,R13
00E4 4980          CMPB      RL4,#00H
00E6 3D1C          JMPR      cc_NZ,?C0018
                                           ; SOURCE LINE # 182
00E8 7ED1          BCLR      P0_OUT_P7
                                           ; SOURCE LINE # 183
00EA 7EDB          BCLR      P10_OUT_P7
                                           ; SOURCE LINE # 185
00EC E009          MOV       R9,#00H
00EE E008          MOV       R8,#00H
00F0 DA000000 E    CALLS     SEG (set_phase_on),set_phase_on
                                           ; SOURCE LINE # 186
00F4 E009          MOV       R9,#00H
00F6 E018          MOV       R8,#01H
00F8 DA000000 E    CALLS     SEG (set_phase_on),set_phase_on
                                           ; SOURCE LINE # 187
00FC E009          MOV       R9,#00H
00FE E028          MOV       R8,#02H
0100 DA000000 E    CALLS     SEG (set_phase_on),set_phase_on
                                           ; SOURCE LINE # 188
0104 E009          MOV       R9,#00H
0106 E008          MOV       R8,#00H
0108 DA000000 E    CALLS     SEG (pwm_setduty),pwm_setduty
                                           ; SOURCE LINE # 189
010C E009          MOV       R9,#00H
010E E018          MOV       R8,#01H
0110 DA000000 E    CALLS     SEG (pwm_setduty),pwm_setduty
                                           ; SOURCE LINE # 190
0114 E009          MOV       R9,#00H
0116 E028          MOV       R8,#02H
0118 DA000000 E    CALLS     SEG (pwm_setduty),pwm_setduty
                                           ; SOURCE LINE # 192
011C F68F0000 E    MOV       g_time_inh,ONES
                                           ; SOURCE LINE # 193
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 11  

0120         ?C0018:
                                           ; SOURCE LINE # 195
0120 E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 196
0122 FCFD          POP       R13
0124 DB00          RETS      
             ; FUNCTION set_motor_ctrl_enable (END    RMASK = @0x7FFF)

             ; FUNCTION save_parameters (BEGIN  RMASK = @0x4010)
                                           ; SOURCE LINE # 201
;---- Variable 'len' assigned to Register 'R10' ----
;---- Variable 'para_buf' assigned to Register 'R8/R9' ----
                                           ; SOURCE LINE # 206
0126 E118          MOVB      RL4,#01H
                                           ; SOURCE LINE # 207
0128 DB00          RETS      
             ; FUNCTION save_parameters (END    RMASK = @0x4010)

             ; FUNCTION read_parameters (BEGIN  RMASK = @0x4010)
                                           ; SOURCE LINE # 212
;---- Variable 'len' assigned to Register 'R10' ----
;---- Variable 'para_buf' assigned to Register 'R8/R9' ----
                                           ; SOURCE LINE # 217
012A E118          MOVB      RL4,#01H
                                           ; SOURCE LINE # 218
012C DB00          RETS      
             ; FUNCTION read_parameters (END    RMASK = @0x4010)

             ; FUNCTION set_motor_offset (BEGIN  RMASK = @0x4030)
                                           ; SOURCE LINE # 223
;---- Variable 'offset' assigned to Register 'R8' ----
                                           ; SOURCE LINE # 225
012E F3FA0000 E    MOVB      RL5,g_motor_type_ub
0132 49A1          CMPB      RL5,#01H
0134 3D03          JMPR      cc_NZ,?C0025
                                           ; SOURCE LINE # 226
0136 F6F80000 E    MOV       g_pos_offset_bldc_uw,R8
013A 0D04          JMPR      cc_UC,?C0026
013C         ?C0025:
                                           ; SOURCE LINE # 227
013C 49A2          CMPB      RL5,#02H
013E 3D02          JMPR      cc_NZ,?C0026
                                           ; SOURCE LINE # 228
0140 F6F80000 E    MOV       g_pos_offset_pmsm_uw,R8
0144         ?C0026:
                                           ; SOURCE LINE # 230
0144 E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 231
0146 DB00          RETS      
             ; FUNCTION set_motor_offset (END    RMASK = @0x4030)

             ; FUNCTION get_bat_volt (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 240
0148 E058          MOV       R8,#05H
014A DA000000 E    CALLS     SEG (get_ad_value),get_ad_value
014E F064          MOV       R6,R4
;---- Variable 'l_tmpu16' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 243
0150 5C24          SHL       R4,#02H
0152 2046          SUB       R4,R6
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 12  

0154 5C34          SHL       R4,#03H
0156 0046          ADD       R4,R6
0158 F064          MOV       R6,R4
015A 7C76          SHR       R6,#07H
                                           ; SOURCE LINE # 245
015C F046          MOV       R4,R6
                                           ; SOURCE LINE # 246
015E DB00          RETS      
             ; FUNCTION get_bat_volt (END    RMASK = @0x7FFF)

             ; FUNCTION get_mc_pressure (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 256
0160 E038          MOV       R8,#03H
0162 DA000000 E    CALLS     SEG (get_ad_value),get_ad_value
;---- Variable 'l_tmpu16' assigned to Register 'R4' ----
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
0166 DB00          RETS      
             ; FUNCTION get_mc_pressure (END    RMASK = @0x7FFF)

             ; FUNCTION get_disp_sensor0 (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 268
0168 E048          MOV       R8,#04H
016A DA000000 E    CALLS     SEG (get_ad_value),get_ad_value
;---- Variable 'l_tmpu16' assigned to Register 'R4' ----
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
016E DB00          RETS      
             ; FUNCTION get_disp_sensor0 (END    RMASK = @0x7FFF)

             ; FUNCTION get_ign_volt (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 279
0170 9AC40310      JNB       P4_IN_P1,?C0032
                                           ; SOURCE LINE # 280
0174 DA000000 R    CALLS     SEG (get_bat_volt),get_bat_volt
0178 DB00          RETS      
017A         ?C0032:
                                           ; SOURCE LINE # 282
017A E004          MOV       R4,#00H
                                           ; SOURCE LINE # 283
017C         ?C0033:
017C DB00          RETS      
             ; FUNCTION get_ign_volt (END    RMASK = @0x7FFF)

             ; FUNCTION get_brk_pedal_state (BEGIN  RMASK = @0x4010)
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 290
017E 9AC202A0      JNB       P2_IN_P10,?C0035
                                           ; SOURCE LINE # 292
0182 E014          MOV       R4,#01H
0184 DB00          RETS      
                                           ; SOURCE LINE # 293
0186         ?C0035:
                                           ; SOURCE LINE # 296
0186 E004          MOV       R4,#00H
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 13  

0188         ?C0036:
0188 DB00          RETS      
             ; FUNCTION get_brk_pedal_state (END    RMASK = @0x4010)

             ; FUNCTION get_brk_pedal_volt (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 306
018A E6F81000      MOV       R8,#010H
018E DA000000 E    CALLS     SEG (get_ad_value),get_ad_value
                                           ; SOURCE LINE # 307
0192 DB00          RETS      
             ; FUNCTION get_brk_pedal_volt (END    RMASK = @0x7FFF)

             ; FUNCTION get_current (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 312
0194 ECFD          PUSH      R13
;---- Variable 'i_idx' assigned to Register 'R8' ----
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
0196 E00D          MOV       R13,#00H
;---- Variable 'l_tmpu16' assigned to Register 'R13' ----
                                           ; SOURCE LINE # 316
0198 F048          MOV       R4,R8
019A 2981          SUBB      RL4,#01H
019C 07F8FDFF      ADDB      RL4,#0FFFDH
01A0 9D07          JMPR      cc_NC,?C0043
01A2 0984          ADDB      RL4,#04H
01A4 3D07          JMPR      cc_NZ,?C0039
                                           ; SOURCE LINE # 318
01A6         ?C0040:
                                           ; SOURCE LINE # 319
01A6 E008          MOV       R8,#00H
01A8 DA000000 E    CALLS     SEG (get_ad_value),get_ad_value
01AC F0D4          MOV       R13,R4
                                           ; SOURCE LINE # 320
01AE 0D02          JMPR      cc_UC,?C0039
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
01B0         ?C0043:
                                           ; SOURCE LINE # 325
01B0 E6FDFFFF      MOV       R13,#0FFFFH
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 327
01B4         ?C0039:
                                           ; SOURCE LINE # 329
01B4 F04D          MOV       R4,R13
                                           ; SOURCE LINE # 330
01B6 FCFD          POP       R13
01B8 DB00          RETS      
             ; FUNCTION get_current (END    RMASK = @0x7FFF)

             ; FUNCTION get_temp_sensor_pcb (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 337
01BA E098          MOV       R8,#09H
01BC DA000000 E    CALLS     SEG (get_ad_value),get_ad_value
                                           ; SOURCE LINE # 338
01C0 DB00          RETS      
             ; FUNCTION get_temp_sensor_pcb (END    RMASK = @0x7FFF)

             ; FUNCTION get_temp_sensor_mosfet (BEGIN  RMASK = @0x0010)
C166 COMPILER V7.57.0, CTRL_IF                                                             12/26/2020 15:24:04 PAGE 14  

                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 345
01C2 E6F4FFFF      MOV       R4,#0FFFFH
                                           ; SOURCE LINE # 346
01C6 DB00          RETS      
             ; FUNCTION get_temp_sensor_mosfet (END    RMASK = @0x0010)



MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         456     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           2     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =           6     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
