C166 COMPILER V7.57.0, HICAN                                                               12/25/2020 22:12:53 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE HICAN
OBJECT MODULE PLACED IN .\objs\hican.obj
COMPILER INVOKED BY: C:\Keil_v5\C166\BIN\C166.EXE CAN_Driver\hican.c MODV2 LARGE BROWSE INCDIR(.\src\hardware;.\src;.\EO
                    -L_Diag;.\DTC_Diag;.\Hw_Driver;.\CalTool;.\DTC_Diag\mcu2_prot;./CAN_Driver;.\xcp;.\src\include;.\EBS_Ctrl_Logic) MODV2 DE
                    -BUG CODE PRINT(.\objs\hican.lst) TABS(2) OBJECT(.\objs\hican.obj) 

 stmt lvl     source

    1         ////////////////////////////////////////////////////////////////////////////////
    2         /*******************************************************************************
    3         * 
    4         * High Layer CAN Driver Implementation
    5         *  
    6         *      
    7         *******************************************************************************/
    8         ////////////////////////////////////////////////////////////////////////////////
    9         
   10         #include "hican.h"
   11         #include "xcpbasic.h"
   12         #include "motor_if.h"
   13         #include "ctrl_if.h"
   14         #include "aut_drv.h"
   15         
   16         #ifdef WIN32
              #include "pc_hw.h"
              #endif
   19         
   20         #define STANDARD_ID
   21         //#define EXTENDEDIDS
   22         ////////////////////////////////////////////////////////////////////////////////
   23         // CAN IDs: Diagnose
   24         u16 g_diag_tester_id = 0x7C0;
   25         u16 g_diag_resp_id   = 0x7C1;
   26         
   27         // CAN IDs: XCP
   28         u16 g_cto_id         = 0x60A;
   29         u16 g_dto_id         = 0x60B;
   30         
   31         u16 wgy = 0;
   32         
   33         ////////////////////////////////////////////////////////////////////////////////
   34         // Init CAN application layer
   35         ////////////////////////////////////////////////////////////////////////////////
   36         u8 hican_init(void)
   37         {
   38  1        #ifdef STANDARD_ID
   39  1        
   40  1        // Note: Message Box: 0~15 => CAN node 0, 16~31 => CAN node 0
   41  1        
   42  1        // Message Box 4~9: Transmit (Standard IDs)
   43  1          can_load(4,0x304,0x80,(u8 *)"--------");
   44  1          can_load(5,0x103,0x80,(u8 *)"--------");
   45  1          can_load(6,0x104,0x80,(u8 *)"--------");
   46  1          can_load(7,0x105,0x80,(u8 *)"--------");
   47  1          can_load(8,0x106,0x80,(u8 *)"--------");
   48  1          can_load(9,0x107,0x80,(u8 *)"--------");
   49  1        
   50  1        // Message Box 12: Accept all IDs
   51  1        //can_rx(12,0,0|0x800,0x80);
   52  1        
   53  1        // Message Box 0/1: Accept the IDs specified
C166 COMPILER V7.57.0, HICAN                                                               12/25/2020 22:12:53 PAGE 2   

   54  1        can_rx(0,g_cto_id,        0x7FF|0x800,0x80);
   55  1        can_rx(1,g_diag_tester_id,0x7FF|0x800,0x80);
   56  1        // Message Box 2/3: Will send the IDs specified
   57  1        //can_load(2,g_dto_id,      0x80,(u8 *)"--------");
   58  1        //can_load(3,g_diag_resp_id,0x80,(u8 *)"--------");
   59  1        #endif
   60  1      
   61  1        #ifdef EXTENDEDIDS
                // Message Box 16~19: Transmit (Extended IDs)
                  can_load(16,0x18F0010B,0x84,(u8 *)"--------"); // Node 0, 29bit-id
                  can_load(17,0x18FF020B,0x84,(u8 *)"--------"); // Node 0, 29bit-id
                  can_load(18,0x18FF030B,0x84,(u8 *)"--------"); // Node 0, 29bit-id
                  can_load(19,0x18FF040B,0x84,(u8 *)"--------"); // Node 0, 29bit-id
                  
                // Message Box 28~31: Accept the IDs specified
                  can_rx(31,0x089F6265,0x1FFFFFFF|0x20000000,0x84); // Node 0
                  can_rx(30,0x1CF00401,0x1FFFFFFF|0x20000000,0x84); // Node 0
                  can_rx(29,0x0CF00402,0x1FFFFFFF|0x20000000,0x84); // Node 0 
                  can_rx(28,0x0CF00403,0x1FFFFFFF|0x20000000,0x84); // Node 0
                //can_rx(31,0x110,0x7FF|0x800,0x80); // Node 0
                //can_rx(30,0x110,0x7FF|0x800,0x80); // Node 0
                //can_rx(29,0x110,0x7FF|0x800,0x80); // Node 0
                //can_rx(28,0x110,0x7FF|0x800,0x80); // Node 0
                
                // Message Box 27: Accept all IDs
                //can_rx(31,0x0CF00400,0x20000000,0x84);
                
                //can_rx(31,0x0CF00400,0x1FFFFFFF|0x20000000,0x85); // Node 1
                //can_rx(30,0x0CF00401,0x1FFFFFFF|0x20000000,0x85); // Node 1
                //can_rx(29,0x0CF00402,0x1FFFFFFF|0x20000000,0x85); // Node 1
                //can_rx(28,0x0CF00403,0x1FFFFFFF|0x20000000,0x85); // Node 1
              #endif
   86  1      
   87  1          return 0;
   88  1      }
   89         
   90         ////////////////////////////////////////////////////////////////////////////////
   91         // 10ms task
   92         ////////////////////////////////////////////////////////////////////////////////
   93         void hican_10ms_hook(void)
   94         {
   95  1      }
   96         
   97         ////////////////////////////////////////////////////////////////////////////////
   98         // 1ms task
   99         ////////////////////////////////////////////////////////////////////////////////
  100         void hican_1ms_hook(void)
  101         {
  102  1      }
  103         
  104         ////////////////////////////////////////////////////////////////////////////////
  105         // CAN bus off reccovery: reserved
  106         ////////////////////////////////////////////////////////////////////////////////
  107         // 10ms task
  108         u8 do_boff_recovery(void)
  109         {
  110  1        static u8 l_timer_boff=0;
  111  1      
  112  1        if(get_can_bus_off())
  113  1        {
  114  2          l_timer_boff++;
  115  2          // Node Initialization retry: 500ms after Bus off
C166 COMPILER V7.57.0, HICAN                                                               12/25/2020 22:12:53 PAGE 3   

  116  2          if(l_timer_boff>=50) // 500ms
  117  2          {
  118  3            set_can_on();
  119  3            l_timer_boff=0;
  120  3          }
  121  2        }
  122  1        else
  123  1          l_timer_boff=0;
  124  1      
  125  1        return 0;
  126  1      }
  127         
  128         ////////////////////////////////////////////////////////////////////////////////
  129         // Callback function: called when CAN message received
  130         ////////////////////////////////////////////////////////////////////////////////
  131         void can_do_objx_hook_hican(u8 no,u32 id,u8 far * buf,u8 len)
  132         {
  133  1        u8 bufx[32];
  134  1        u8 idx;
  135  1        
  136  1        UNUSED_PARA(no);
  137  1        UNUSED_PARA(buf);
  138  1        UNUSED_PARA(len);
  139  1        
  140  1        for(idx=0;idx<len;idx++)
  141  1        {
  142  2          bufx[idx]=buf[idx];
  143  2        }
  144  1        
  145  1        if(id==g_diag_tester_id)
  146  1        {
  147  2          // Parsing the Tester command: ISO 15765
  148  2          // do_diag_cmd(buf,len);
  149  2          return;
  150  2        }
  151  1        if(id==g_cto_id)
  152  1        {
  153  2          // Parsing the XCP CTO command
  154  2          XcpCommand((u32 *)bufx);
  155  2      
  156  2      #ifdef WIN32
                  show_msglist("XCP:[%02X %02X %02X %02X %02X %02X %02X %02X]",
                    bufx[0],bufx[1],bufx[2],bufx[3],
                    bufx[4],bufx[5],bufx[6],bufx[7]
                    );
              #endif
  162  2          return;
  163  2        }
  164  1        //Auto Drive Commend
  165  1        if(id == 0x089F6265)
  166  1        {
  167  2          do_aut_drv_response(buf);
  168  2        }
  169  1        if(id == 0x0CF00401)
  170  1        {
  171  2          wgy = 1;
  172  2        }
  173  1        if(id == 0x0CF00402)
  174  1        {
  175  2          wgy = 1;
  176  2        }
  177  1        if(id == 0x0CF00403)
C166 COMPILER V7.57.0, HICAN                                                               12/25/2020 22:12:53 PAGE 4   

  178  1        {
  179  2          wgy = 1;
  180  2        }
  181  1        if(id==0x401)
  182  1        {
  183  2          do_motor_bldc_debug(buf);
  184  2        }
  185  1      
  186  1        can_do_obj(id,len,buf);
  187  1      }
  188         ////////////////////////////////////////////////////////////////////////////////
C166 COMPILER V7.57.0, HICAN                                                               12/25/2020 22:12:53 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION hican_init (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 43
0000 E6F40000 R    MOV       R4,#POF (SC?7?0)
0004 E6F50000 R    MOV       R5,#PAG (SC?7?0)
0008 8850          MOV       [-R0],R5
000A F0C4          MOV       R12,R4
000C E6FB8000      MOV       R11,#080H
0010 E6F90403      MOV       R9,#0304H
0014 E00A          MOV       R10,#00H
0016 E048          MOV       R8,#04H
0018 DA000000 E    CALLS     SEG (can_load),can_load
001C 0802          ADD       R0,#02H
                                           ; SOURCE LINE # 44
001E E6F40000 R    MOV       R4,#POF (SC?7?0)
0022 E6F50000 R    MOV       R5,#PAG (SC?7?0)
0026 8850          MOV       [-R0],R5
0028 F0C4          MOV       R12,R4
002A E6FB8000      MOV       R11,#080H
002E E6F90301      MOV       R9,#0103H
0032 E00A          MOV       R10,#00H
0034 E058          MOV       R8,#05H
0036 DA000000 E    CALLS     SEG (can_load),can_load
003A 0802          ADD       R0,#02H
                                           ; SOURCE LINE # 45
003C E6F40000 R    MOV       R4,#POF (SC?7?0)
0040 E6F50000 R    MOV       R5,#PAG (SC?7?0)
0044 8850          MOV       [-R0],R5
0046 F0C4          MOV       R12,R4
0048 E6FB8000      MOV       R11,#080H
004C E6F90401      MOV       R9,#0104H
0050 E00A          MOV       R10,#00H
0052 E068          MOV       R8,#06H
0054 DA000000 E    CALLS     SEG (can_load),can_load
0058 0802          ADD       R0,#02H
                                           ; SOURCE LINE # 46
005A E6F40000 R    MOV       R4,#POF (SC?7?0)
005E E6F50000 R    MOV       R5,#PAG (SC?7?0)
0062 8850          MOV       [-R0],R5
0064 F0C4          MOV       R12,R4
0066 E6FB8000      MOV       R11,#080H
006A E6F90501      MOV       R9,#0105H
006E E00A          MOV       R10,#00H
0070 E078          MOV       R8,#07H
0072 DA000000 E    CALLS     SEG (can_load),can_load
0076 0802          ADD       R0,#02H
                                           ; SOURCE LINE # 47
0078 E6F40000 R    MOV       R4,#POF (SC?7?0)
007C E6F50000 R    MOV       R5,#PAG (SC?7?0)
0080 8850          MOV       [-R0],R5
0082 F0C4          MOV       R12,R4
0084 E6FB8000      MOV       R11,#080H
0088 E6F90601      MOV       R9,#0106H
008C E00A          MOV       R10,#00H
008E E088          MOV       R8,#08H
0090 DA000000 E    CALLS     SEG (can_load),can_load
0094 0802          ADD       R0,#02H
                                           ; SOURCE LINE # 48
0096 E6F40000 R    MOV       R4,#POF (SC?7?0)
C166 COMPILER V7.57.0, HICAN                                                               12/25/2020 22:12:53 PAGE 6   

009A E6F50000 R    MOV       R5,#PAG (SC?7?0)
009E 8850          MOV       [-R0],R5
00A0 F0C4          MOV       R12,R4
00A2 E6FB8000      MOV       R11,#080H
00A6 E6F90701      MOV       R9,#0107H
00AA E00A          MOV       R10,#00H
00AC E098          MOV       R8,#09H
00AE DA000000 E    CALLS     SEG (can_load),can_load
00B2 0802          ADD       R0,#02H
                                           ; SOURCE LINE # 54
00B4 E6F48000      MOV       R4,#080H
00B8 8840          MOV       [-R0],R4
00BA E6FBFF0F      MOV       R11,#0FFFH
00BE E00C          MOV       R12,#00H
00C0 F2F90400 R    MOV       R9,g_cto_id
00C4 E00A          MOV       R10,#00H
00C6 E008          MOV       R8,#00H
00C8 DA000000 E    CALLS     SEG (can_rx),can_rx
00CC 0802          ADD       R0,#02H
                                           ; SOURCE LINE # 55
00CE E6F48000      MOV       R4,#080H
00D2 8840          MOV       [-R0],R4
00D4 E6FBFF0F      MOV       R11,#0FFFH
00D8 E00C          MOV       R12,#00H
00DA F2F90800 R    MOV       R9,g_diag_tester_id
00DE E00A          MOV       R10,#00H
00E0 E018          MOV       R8,#01H
00E2 DA000000 E    CALLS     SEG (can_rx),can_rx
00E6 0802          ADD       R0,#02H
                                           ; SOURCE LINE # 87
00E8 E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 88
00EA DB00          RETS      
             ; FUNCTION hican_init (END    RMASK = @0x7FFF)

             ; FUNCTION hican_10ms_hook (BEGIN  RMASK = @0x8000)
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 95
00EC DB00          RETS      
             ; FUNCTION hican_10ms_hook (END    RMASK = @0x8000)

             ; FUNCTION hican_1ms_hook (BEGIN  RMASK = @0x8000)
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 102
00EE DB00          RETS      
             ; FUNCTION hican_1ms_hook (END    RMASK = @0x8000)

             ; FUNCTION do_boff_recovery (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 112
00F0 DA000000 E    CALLS     SEG (get_can_bus_off),get_can_bus_off
00F4 4980          CMPB      RL4,#00H
00F6 2D0C          JMPR      cc_Z,?C0002
                                           ; SOURCE LINE # 114
00F8 258F0A00 R    SUBB      l_timer_boff,ONES
                                           ; SOURCE LINE # 116
00FC F3F80A00 R    MOVB      RL4,l_timer_boff
0100 47F83200      CMPB      RL4,#032H
0104 8D07          JMPR      cc_ULT,?C0004
                                           ; SOURCE LINE # 118
0106 DA000000 E    CALLS     SEG (set_can_on),set_can_on
C166 COMPILER V7.57.0, HICAN                                                               12/25/2020 22:12:53 PAGE 7   

                                           ; SOURCE LINE # 119
010A F78E0A00 R    MOVB      l_timer_boff,ZEROS
                                           ; SOURCE LINE # 120
010E 0D02          JMPR      cc_UC,?C0004
0110         ?C0002:
                                           ; SOURCE LINE # 123
0110 F78E0A00 R    MOVB      l_timer_boff,ZEROS
0114         ?C0004:
                                           ; SOURCE LINE # 125
0114 E108          MOVB      RL4,#00H
                                           ; SOURCE LINE # 126
0116 DB00          RETS      
             ; FUNCTION do_boff_recovery (END    RMASK = @0x7FFF)

             ; FUNCTION can_do_objx_hook_hican (BEGIN  RMASK = @0x7FFF)
                                           ; SOURCE LINE # 131
0118 ECFE          PUSH      R14
011A ECFF          PUSH      R15
011C 88C0          MOV       [-R0],R12
011E 88B0          MOV       [-R0],R11
0120 F0E9          MOV       R14,R9
0122 F0FA          MOV       R15,R10
;---- Variable 'id' assigned to Register 'R14/R15' ----
;---- Variable 'no' assigned to Register 'R8' ----
0124 06F0E0FF      ADD       R0,#0FFE0H
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 140
0128 E10E          MOVB      RL7,#00H
;---- Variable 'idx' assigned to Register 'RL7' ----
012A 0D0C          JMPR      cc_UC,?C0008
012C         ?C0009:
                                           ; SOURCE LINE # 142
012C C0E8          MOVBZ     R8,RL7
012E D4502200      MOV       R5,[R0+#022H] ; buf+2
0132 D4402000      MOV       R4,[R0+#020H] ; buf
0136 0048          ADD       R4,R8
0138 DC45          EXTP      R5,#01H
013A A9C4          MOVB      RL6,[R4]
013C F040          MOV       R4,R0
013E 0048          ADD       R4,R8
0140 B9C4          MOVB      [R4],RL6
                                           ; SOURCE LINE # 143
0142 09E1          ADDB      RL7,#01H
0144         ?C0008:
0144 F4A02400      MOVB      RL5,[R0+#024H]; len
0148 41EA          CMPB      RL7,RL5
014A 8DF0          JMPR      cc_ULT,?C0009
014C         ?C0007:
                                           ; SOURCE LINE # 145
014C F2F60800 R    MOV       R6,g_diag_tester_id
0150 E007          MOV       R7,#00H
0152 F04E          MOV       R4,R14
0154 F05F          MOV       R5,R15
0156 2046          SUB       R4,R6
0158 3057          SUBC      R5,R7
015A 2D52          JMPR      cc_Z,?C0012
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 150
015C         ?C0011:
                                           ; SOURCE LINE # 151
015C F2F60400 R    MOV       R6,g_cto_id
0160 E007          MOV       R7,#00H
C166 COMPILER V7.57.0, HICAN                                                               12/25/2020 22:12:53 PAGE 8   

0162 F04E          MOV       R4,R14
0164 F05F          MOV       R5,R15
0166 2046          SUB       R4,R6
0168 3057          SUBC      R5,R7
016A 3D08          JMPR      cc_NZ,?C0013
                                           ; SOURCE LINE # 154
016C F080          MOV       R8,R0
016E 66F8FF3F      AND       R8,#03FFFH
0172 F2F904FE      MOV       R9,DPP2
0176 DA000000 E    CALLS     SEG (XcpCommand),XcpCommand
                                           ; SOURCE LINE # 162
017A 0D42          JMPR      cc_UC,?C0012
                                           ; SOURCE LINE # 163
017C         ?C0013:
                                           ; SOURCE LINE # 165
017C F04E          MOV       R4,R14
017E F05F          MOV       R5,R15
0180 26F46562      SUB       R4,#06265H
0184 36F59F08      SUBC      R5,#089FH
0188 3D06          JMPR      cc_NZ,?C0014
                                           ; SOURCE LINE # 167
018A D4902200      MOV       R9,[R0+#022H] ; buf+2
018E D4802000      MOV       R8,[R0+#020H] ; buf
0192 DA000000 E    CALLS     SEG (do_aut_drv_response),do_aut_drv_response
                                           ; SOURCE LINE # 168
0196         ?C0014:
                                           ; SOURCE LINE # 169
0196 F04E          MOV       R4,R14
0198 F05F          MOV       R5,R15
019A 26F40104      SUB       R4,#0401H
019E 36F5F00C      SUBC      R5,#0CF0H
01A2 3D03          JMPR      cc_NZ,?C0015
                                           ; SOURCE LINE # 171
01A4 E014          MOV       R4,#01H
01A6 F6F40000 R    MOV       wgy,R4
                                           ; SOURCE LINE # 172
01AA         ?C0015:
                                           ; SOURCE LINE # 173
01AA F04E          MOV       R4,R14
01AC F05F          MOV       R5,R15
01AE 26F40204      SUB       R4,#0402H
01B2 36F5F00C      SUBC      R5,#0CF0H
01B6 3D03          JMPR      cc_NZ,?C0016
                                           ; SOURCE LINE # 175
01B8 E014          MOV       R4,#01H
01BA F6F40000 R    MOV       wgy,R4
                                           ; SOURCE LINE # 176
01BE         ?C0016:
                                           ; SOURCE LINE # 177
01BE F04E          MOV       R4,R14
01C0 F05F          MOV       R5,R15
01C2 26F40304      SUB       R4,#0403H
01C6 36F5F00C      SUBC      R5,#0CF0H
01CA 3D03          JMPR      cc_NZ,?C0017
                                           ; SOURCE LINE # 179
01CC E014          MOV       R4,#01H
01CE F6F40000 R    MOV       wgy,R4
                                           ; SOURCE LINE # 180
01D2         ?C0017:
                                           ; SOURCE LINE # 181
01D2 F04E          MOV       R4,R14
01D4 F05F          MOV       R5,R15
C166 COMPILER V7.57.0, HICAN                                                               12/25/2020 22:12:53 PAGE 9   

01D6 26F40104      SUB       R4,#0401H
01DA 3850          SUBC      R5,#00H
01DC 3D06          JMPR      cc_NZ,?C0018
                                           ; SOURCE LINE # 183
01DE D4902200      MOV       R9,[R0+#022H] ; buf+2
01E2 D4802000      MOV       R8,[R0+#020H] ; buf
01E6 DA000000 E    CALLS     SEG (do_motor_bldc_debug),do_motor_bldc_debug
                                           ; SOURCE LINE # 184
01EA         ?C0018:
                                           ; SOURCE LINE # 186
01EA D4C02200      MOV       R12,[R0+#022H]; buf+2
01EE D4B02000      MOV       R11,[R0+#020H]; buf
01F2 F4802400      MOVB      RL4,[R0+#024H]; len
01F6 C08A          MOVBZ     R10,RL4
01F8 F08E          MOV       R8,R14
01FA F09F          MOV       R9,R15
01FC DA000000 E    CALLS     SEG (can_do_obj),can_do_obj
                                           ; SOURCE LINE # 187
0200         ?C0012:
0200 06F02400      ADD       R0,#024H
0204 FCFF          POP       R15
0206 FCFE          POP       R14
0208 DB00          RETS      
             ; FUNCTION can_do_objx_hook_hican (END    RMASK = @0x7FFF)



MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         522     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =           9     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          11     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          36     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
